// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: server.proto

package snomed

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SctID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier int64 `protobuf:"varint,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (x *SctID) Reset() {
	*x = SctID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SctID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SctID) ProtoMessage() {}

func (x *SctID) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SctID.ProtoReflect.Descriptor instead.
func (*SctID) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{0}
}

func (x *SctID) GetIdentifier() int64 {
	if x != nil {
		return x.Identifier
	}
	return 0
}

type ReferenceSetItemID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (x *ReferenceSetItemID) Reset() {
	*x = ReferenceSetItemID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceSetItemID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceSetItemID) ProtoMessage() {}

func (x *ReferenceSetItemID) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceSetItemID.ProtoReflect.Descriptor instead.
func (*ReferenceSetItemID) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{1}
}

func (x *ReferenceSetItemID) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

var File_server_proto protoreflect.FileDescriptor

var file_server_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x1a, 0x0c, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x27, 0x0a, 0x05, 0x53, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x34, 0x0a, 0x12, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x32, 0x8f, 0x0b, 0x0a, 0x08, 0x53, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x43, 0x54, 0x12, 0x56,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x0d, 0x2e, 0x73,
	0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x53, 0x63, 0x74, 0x49, 0x44, 0x1a, 0x0f, 0x2e, 0x73, 0x6e,
	0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x22, 0x28, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64,
	0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x7d, 0x12, 0x6f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x0d, 0x2e, 0x73,
	0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x53, 0x63, 0x74, 0x49, 0x44, 0x1a, 0x17, 0x2e, 0x73, 0x6e,
	0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x7d, 0x2f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x74, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0d, 0x2e, 0x73, 0x6e, 0x6f,
	0x6d, 0x65, 0x64, 0x2e, 0x53, 0x63, 0x74, 0x49, 0x44, 0x1a, 0x1b, 0x2e, 0x73, 0x6e, 0x6f, 0x6d,
	0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x7d,
	0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6f, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74,
	0x73, 0x12, 0x0d, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x53, 0x63, 0x74, 0x49, 0x44,
	0x1a, 0x18, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x7d, 0x2f, 0x72, 0x65, 0x66, 0x73, 0x65, 0x74, 0x73, 0x30, 0x01, 0x12, 0x71,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x12, 0x0d, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x53, 0x63, 0x74, 0x49, 0x44, 0x1a,
	0x18, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2e, 0x12, 0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2f, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x7d, 0x2f, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x30,
	0x01, 0x12, 0x62, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x53, 0x63, 0x74,
	0x49, 0x44, 0x1a, 0x13, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12,
	0x24, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x7d, 0x12, 0x79, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x2e, 0x73,
	0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x1a, 0x18, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65,
	0x64, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2f, 0x72, 0x65, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x7d,
	0x12, 0x72, 0x0a, 0x08, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x17, 0x2e, 0x73,
	0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x22,
	0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6e, 0x6f,
	0x6d, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6d,
	0x61, 0x70, 0x30, 0x01, 0x12, 0x79, 0x0a, 0x0c, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x72, 0x6f, 0x73,
	0x73, 0x4d, 0x61, 0x70, 0x12, 0x1c, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x6d, 0x61, 0x70, 0x73, 0x2f,
	0x7b, 0x72, 0x65, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x73, 0x7d, 0x12,
	0x5c, 0x0a, 0x03, 0x4d, 0x61, 0x70, 0x12, 0x12, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e,
	0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x73, 0x6e, 0x6f,
	0x6d, 0x65, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6e, 0x6f,
	0x6d, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x61, 0x70, 0x12, 0x60, 0x0a,
	0x08, 0x53, 0x75, 0x62, 0x73, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x73, 0x6e, 0x6f, 0x6d,
	0x65, 0x64, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x75, 0x6d, 0x65, 0x73, 0x12,
	0x56, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x73, 0x65, 0x12, 0x14, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65,
	0x64, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12,
	0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x0b, 0x52, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e,
	0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6e, 0x6f, 0x6d, 0x65,
	0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x32, 0x9b, 0x02, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x52,
	0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x15, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65,
	0x64, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12,
	0x11, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x5d, 0x0a, 0x07, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x16, 0x2e,
	0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6e, 0x6f, 0x6d,
	0x65, 0x64, 0x2f, 0x6e, 0x6c, 0x70, 0x2f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x3a, 0x01,
	0x73, 0x12, 0x5e, 0x0a, 0x08, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x12, 0x16, 0x2e,
	0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x53,
	0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2f, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x30,
	0x01, 0x42, 0x35, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x64, 0x72, 0x69, 0x78, 0x2e,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x73, 0x6e, 0x6f, 0x6d,
	0x65, 0x64, 0x63, 0x74, 0x42, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x01, 0x5a, 0x08,
	0x2e, 0x3b, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_server_proto_rawDescOnce sync.Once
	file_server_proto_rawDescData = file_server_proto_rawDesc
)

func file_server_proto_rawDescGZIP() []byte {
	file_server_proto_rawDescOnce.Do(func() {
		file_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_proto_rawDescData)
	})
	return file_server_proto_rawDescData
}

var file_server_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_server_proto_goTypes = []interface{}{
	(*SctID)(nil),                 // 0: snomed.SctID
	(*ReferenceSetItemID)(nil),    // 1: snomed.ReferenceSetItemID
	(*CrossMapRequest)(nil),       // 2: snomed.CrossMapRequest
	(*TranslateFromRequest)(nil),  // 3: snomed.TranslateFromRequest
	(*MapRequest)(nil),            // 4: snomed.MapRequest
	(*SubsumptionRequest)(nil),    // 5: snomed.SubsumptionRequest
	(*ParseRequest)(nil),          // 6: snomed.ParseRequest
	(*RefinementRequest)(nil),     // 7: snomed.RefinementRequest
	(*SearchRequest)(nil),         // 8: snomed.SearchRequest
	(*ExtractRequest)(nil),        // 9: snomed.ExtractRequest
	(*SynonymRequest)(nil),        // 10: snomed.SynonymRequest
	(*Concept)(nil),               // 11: snomed.Concept
	(*ExtendedConcept)(nil),       // 12: snomed.ExtendedConcept
	(*ConceptDescriptions)(nil),   // 13: snomed.ConceptDescriptions
	(*ReferenceSetItem)(nil),      // 14: snomed.ReferenceSetItem
	(*ConceptReference)(nil),      // 15: snomed.ConceptReference
	(*Description)(nil),           // 16: snomed.Description
	(*TranslateFromResponse)(nil), // 17: snomed.TranslateFromResponse
	(*MapResponse)(nil),           // 18: snomed.MapResponse
	(*SubsumptionResponse)(nil),   // 19: snomed.SubsumptionResponse
	(*Expression)(nil),            // 20: snomed.Expression
	(*RefinementResponse)(nil),    // 21: snomed.RefinementResponse
	(*SearchResponse)(nil),        // 22: snomed.SearchResponse
	(*ExtractResponse)(nil),       // 23: snomed.ExtractResponse
	(*SynonymResponseItem)(nil),   // 24: snomed.SynonymResponseItem
}
var file_server_proto_depIdxs = []int32{
	0,  // 0: snomed.SnomedCT.GetConcept:input_type -> snomed.SctID
	0,  // 1: snomed.SnomedCT.GetExtendedConcept:input_type -> snomed.SctID
	0,  // 2: snomed.SnomedCT.GetDescriptions:input_type -> snomed.SctID
	0,  // 3: snomed.SnomedCT.GetReferenceSets:input_type -> snomed.SctID
	0,  // 4: snomed.SnomedCT.GetAllChildren:input_type -> snomed.SctID
	0,  // 5: snomed.SnomedCT.GetDescription:input_type -> snomed.SctID
	1,  // 6: snomed.SnomedCT.GetReferenceSetItem:input_type -> snomed.ReferenceSetItemID
	2,  // 7: snomed.SnomedCT.CrossMap:input_type -> snomed.CrossMapRequest
	3,  // 8: snomed.SnomedCT.FromCrossMap:input_type -> snomed.TranslateFromRequest
	4,  // 9: snomed.SnomedCT.Map:input_type -> snomed.MapRequest
	5,  // 10: snomed.SnomedCT.Subsumes:input_type -> snomed.SubsumptionRequest
	6,  // 11: snomed.SnomedCT.Parse:input_type -> snomed.ParseRequest
	7,  // 12: snomed.SnomedCT.Refinements:input_type -> snomed.RefinementRequest
	8,  // 13: snomed.Search.Search:input_type -> snomed.SearchRequest
	9,  // 14: snomed.Search.Extract:input_type -> snomed.ExtractRequest
	10, // 15: snomed.Search.Synonyms:input_type -> snomed.SynonymRequest
	11, // 16: snomed.SnomedCT.GetConcept:output_type -> snomed.Concept
	12, // 17: snomed.SnomedCT.GetExtendedConcept:output_type -> snomed.ExtendedConcept
	13, // 18: snomed.SnomedCT.GetDescriptions:output_type -> snomed.ConceptDescriptions
	14, // 19: snomed.SnomedCT.GetReferenceSets:output_type -> snomed.ReferenceSetItem
	15, // 20: snomed.SnomedCT.GetAllChildren:output_type -> snomed.ConceptReference
	16, // 21: snomed.SnomedCT.GetDescription:output_type -> snomed.Description
	14, // 22: snomed.SnomedCT.GetReferenceSetItem:output_type -> snomed.ReferenceSetItem
	14, // 23: snomed.SnomedCT.CrossMap:output_type -> snomed.ReferenceSetItem
	17, // 24: snomed.SnomedCT.FromCrossMap:output_type -> snomed.TranslateFromResponse
	18, // 25: snomed.SnomedCT.Map:output_type -> snomed.MapResponse
	19, // 26: snomed.SnomedCT.Subsumes:output_type -> snomed.SubsumptionResponse
	20, // 27: snomed.SnomedCT.Parse:output_type -> snomed.Expression
	21, // 28: snomed.SnomedCT.Refinements:output_type -> snomed.RefinementResponse
	22, // 29: snomed.Search.Search:output_type -> snomed.SearchResponse
	23, // 30: snomed.Search.Extract:output_type -> snomed.ExtractResponse
	24, // 31: snomed.Search.Synonyms:output_type -> snomed.SynonymResponseItem
	16, // [16:32] is the sub-list for method output_type
	0,  // [0:16] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_server_proto_init() }
func file_server_proto_init() {
	if File_server_proto != nil {
		return
	}
	file_snomed_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SctID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceSetItemID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_server_proto_goTypes,
		DependencyIndexes: file_server_proto_depIdxs,
		MessageInfos:      file_server_proto_msgTypes,
	}.Build()
	File_server_proto = out.File
	file_server_proto_rawDesc = nil
	file_server_proto_goTypes = nil
	file_server_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SnomedCTClient is the client API for SnomedCT service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SnomedCTClient interface {
	GetConcept(ctx context.Context, in *SctID, opts ...grpc.CallOption) (*Concept, error)
	// GetExtendedConcept returns the concept with the specified identifier.
	// The preferred description will be determined by language preferences
	// defined at runtime.
	// For example, the header accept-language may be used to define language preferences
	// using tags as per format defined by IETF (http://www.ietf.org/rfc/rfc2616.txt)
	// or by setting at a server-wide basis.
	GetExtendedConcept(ctx context.Context, in *SctID, opts ...grpc.CallOption) (*ExtendedConcept, error)
	// GetDescriptions returns descriptions for a given concept.
	GetDescriptions(ctx context.Context, in *SctID, opts ...grpc.CallOption) (*ConceptDescriptions, error)
	// GetReferenceSets returns the reference sets to which this concept is a member
	GetReferenceSets(ctx context.Context, in *SctID, opts ...grpc.CallOption) (SnomedCT_GetReferenceSetsClient, error)
	// GetAllChildren returns all children of the specified concept
	GetAllChildren(ctx context.Context, in *SctID, opts ...grpc.CallOption) (SnomedCT_GetAllChildrenClient, error)
	// GetDescription returns a single description, by identifier
	GetDescription(ctx context.Context, in *SctID, opts ...grpc.CallOption) (*Description, error)
	// GetReferenceSetItem returns a single item from a reference set, by identifier
	GetReferenceSetItem(ctx context.Context, in *ReferenceSetItemID, opts ...grpc.CallOption) (*ReferenceSetItem, error)
	// CrossMap translates from SNOMED CT to an alternative coding system via a map reference set
	CrossMap(ctx context.Context, in *CrossMapRequest, opts ...grpc.CallOption) (SnomedCT_CrossMapClient, error)
	// FromCrossMap translates from an external coding system to SNOMED-CT.
	FromCrossMap(ctx context.Context, in *TranslateFromRequest, opts ...grpc.CallOption) (*TranslateFromResponse, error)
	// Map translates a SNOMED CT concept into the best match within the specified reference set
	Map(ctx context.Context, in *MapRequest, opts ...grpc.CallOption) (*MapResponse, error)
	// Subsumes determines whether one concept subsumes another
	// This is an implementation of the HL7 FHIR terminology service subsumes method
	// (https://www.hl7.org/fhir/terminology-service.html)
	Subsumes(ctx context.Context, in *SubsumptionRequest, opts ...grpc.CallOption) (*SubsumptionResponse, error)
	// Parse parses a SNOMED expression (compositional grammar)
	Parse(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*Expression, error)
	// Refinements returns the appropriate refinements for this specified concept
	Refinements(ctx context.Context, in *RefinementRequest, opts ...grpc.CallOption) (*RefinementResponse, error)
}

type snomedCTClient struct {
	cc grpc.ClientConnInterface
}

func NewSnomedCTClient(cc grpc.ClientConnInterface) SnomedCTClient {
	return &snomedCTClient{cc}
}

func (c *snomedCTClient) GetConcept(ctx context.Context, in *SctID, opts ...grpc.CallOption) (*Concept, error) {
	out := new(Concept)
	err := c.cc.Invoke(ctx, "/snomed.SnomedCT/GetConcept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snomedCTClient) GetExtendedConcept(ctx context.Context, in *SctID, opts ...grpc.CallOption) (*ExtendedConcept, error) {
	out := new(ExtendedConcept)
	err := c.cc.Invoke(ctx, "/snomed.SnomedCT/GetExtendedConcept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snomedCTClient) GetDescriptions(ctx context.Context, in *SctID, opts ...grpc.CallOption) (*ConceptDescriptions, error) {
	out := new(ConceptDescriptions)
	err := c.cc.Invoke(ctx, "/snomed.SnomedCT/GetDescriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snomedCTClient) GetReferenceSets(ctx context.Context, in *SctID, opts ...grpc.CallOption) (SnomedCT_GetReferenceSetsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SnomedCT_serviceDesc.Streams[0], "/snomed.SnomedCT/GetReferenceSets", opts...)
	if err != nil {
		return nil, err
	}
	x := &snomedCTGetReferenceSetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SnomedCT_GetReferenceSetsClient interface {
	Recv() (*ReferenceSetItem, error)
	grpc.ClientStream
}

type snomedCTGetReferenceSetsClient struct {
	grpc.ClientStream
}

func (x *snomedCTGetReferenceSetsClient) Recv() (*ReferenceSetItem, error) {
	m := new(ReferenceSetItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *snomedCTClient) GetAllChildren(ctx context.Context, in *SctID, opts ...grpc.CallOption) (SnomedCT_GetAllChildrenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SnomedCT_serviceDesc.Streams[1], "/snomed.SnomedCT/GetAllChildren", opts...)
	if err != nil {
		return nil, err
	}
	x := &snomedCTGetAllChildrenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SnomedCT_GetAllChildrenClient interface {
	Recv() (*ConceptReference, error)
	grpc.ClientStream
}

type snomedCTGetAllChildrenClient struct {
	grpc.ClientStream
}

func (x *snomedCTGetAllChildrenClient) Recv() (*ConceptReference, error) {
	m := new(ConceptReference)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *snomedCTClient) GetDescription(ctx context.Context, in *SctID, opts ...grpc.CallOption) (*Description, error) {
	out := new(Description)
	err := c.cc.Invoke(ctx, "/snomed.SnomedCT/GetDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snomedCTClient) GetReferenceSetItem(ctx context.Context, in *ReferenceSetItemID, opts ...grpc.CallOption) (*ReferenceSetItem, error) {
	out := new(ReferenceSetItem)
	err := c.cc.Invoke(ctx, "/snomed.SnomedCT/GetReferenceSetItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snomedCTClient) CrossMap(ctx context.Context, in *CrossMapRequest, opts ...grpc.CallOption) (SnomedCT_CrossMapClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SnomedCT_serviceDesc.Streams[2], "/snomed.SnomedCT/CrossMap", opts...)
	if err != nil {
		return nil, err
	}
	x := &snomedCTCrossMapClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SnomedCT_CrossMapClient interface {
	Recv() (*ReferenceSetItem, error)
	grpc.ClientStream
}

type snomedCTCrossMapClient struct {
	grpc.ClientStream
}

func (x *snomedCTCrossMapClient) Recv() (*ReferenceSetItem, error) {
	m := new(ReferenceSetItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *snomedCTClient) FromCrossMap(ctx context.Context, in *TranslateFromRequest, opts ...grpc.CallOption) (*TranslateFromResponse, error) {
	out := new(TranslateFromResponse)
	err := c.cc.Invoke(ctx, "/snomed.SnomedCT/FromCrossMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snomedCTClient) Map(ctx context.Context, in *MapRequest, opts ...grpc.CallOption) (*MapResponse, error) {
	out := new(MapResponse)
	err := c.cc.Invoke(ctx, "/snomed.SnomedCT/Map", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snomedCTClient) Subsumes(ctx context.Context, in *SubsumptionRequest, opts ...grpc.CallOption) (*SubsumptionResponse, error) {
	out := new(SubsumptionResponse)
	err := c.cc.Invoke(ctx, "/snomed.SnomedCT/Subsumes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snomedCTClient) Parse(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*Expression, error) {
	out := new(Expression)
	err := c.cc.Invoke(ctx, "/snomed.SnomedCT/Parse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snomedCTClient) Refinements(ctx context.Context, in *RefinementRequest, opts ...grpc.CallOption) (*RefinementResponse, error) {
	out := new(RefinementResponse)
	err := c.cc.Invoke(ctx, "/snomed.SnomedCT/Refinements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnomedCTServer is the server API for SnomedCT service.
type SnomedCTServer interface {
	GetConcept(context.Context, *SctID) (*Concept, error)
	// GetExtendedConcept returns the concept with the specified identifier.
	// The preferred description will be determined by language preferences
	// defined at runtime.
	// For example, the header accept-language may be used to define language preferences
	// using tags as per format defined by IETF (http://www.ietf.org/rfc/rfc2616.txt)
	// or by setting at a server-wide basis.
	GetExtendedConcept(context.Context, *SctID) (*ExtendedConcept, error)
	// GetDescriptions returns descriptions for a given concept.
	GetDescriptions(context.Context, *SctID) (*ConceptDescriptions, error)
	// GetReferenceSets returns the reference sets to which this concept is a member
	GetReferenceSets(*SctID, SnomedCT_GetReferenceSetsServer) error
	// GetAllChildren returns all children of the specified concept
	GetAllChildren(*SctID, SnomedCT_GetAllChildrenServer) error
	// GetDescription returns a single description, by identifier
	GetDescription(context.Context, *SctID) (*Description, error)
	// GetReferenceSetItem returns a single item from a reference set, by identifier
	GetReferenceSetItem(context.Context, *ReferenceSetItemID) (*ReferenceSetItem, error)
	// CrossMap translates from SNOMED CT to an alternative coding system via a map reference set
	CrossMap(*CrossMapRequest, SnomedCT_CrossMapServer) error
	// FromCrossMap translates from an external coding system to SNOMED-CT.
	FromCrossMap(context.Context, *TranslateFromRequest) (*TranslateFromResponse, error)
	// Map translates a SNOMED CT concept into the best match within the specified reference set
	Map(context.Context, *MapRequest) (*MapResponse, error)
	// Subsumes determines whether one concept subsumes another
	// This is an implementation of the HL7 FHIR terminology service subsumes method
	// (https://www.hl7.org/fhir/terminology-service.html)
	Subsumes(context.Context, *SubsumptionRequest) (*SubsumptionResponse, error)
	// Parse parses a SNOMED expression (compositional grammar)
	Parse(context.Context, *ParseRequest) (*Expression, error)
	// Refinements returns the appropriate refinements for this specified concept
	Refinements(context.Context, *RefinementRequest) (*RefinementResponse, error)
}

// UnimplementedSnomedCTServer can be embedded to have forward compatible implementations.
type UnimplementedSnomedCTServer struct {
}

func (*UnimplementedSnomedCTServer) GetConcept(context.Context, *SctID) (*Concept, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConcept not implemented")
}
func (*UnimplementedSnomedCTServer) GetExtendedConcept(context.Context, *SctID) (*ExtendedConcept, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtendedConcept not implemented")
}
func (*UnimplementedSnomedCTServer) GetDescriptions(context.Context, *SctID) (*ConceptDescriptions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDescriptions not implemented")
}
func (*UnimplementedSnomedCTServer) GetReferenceSets(*SctID, SnomedCT_GetReferenceSetsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetReferenceSets not implemented")
}
func (*UnimplementedSnomedCTServer) GetAllChildren(*SctID, SnomedCT_GetAllChildrenServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllChildren not implemented")
}
func (*UnimplementedSnomedCTServer) GetDescription(context.Context, *SctID) (*Description, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDescription not implemented")
}
func (*UnimplementedSnomedCTServer) GetReferenceSetItem(context.Context, *ReferenceSetItemID) (*ReferenceSetItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferenceSetItem not implemented")
}
func (*UnimplementedSnomedCTServer) CrossMap(*CrossMapRequest, SnomedCT_CrossMapServer) error {
	return status.Errorf(codes.Unimplemented, "method CrossMap not implemented")
}
func (*UnimplementedSnomedCTServer) FromCrossMap(context.Context, *TranslateFromRequest) (*TranslateFromResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FromCrossMap not implemented")
}
func (*UnimplementedSnomedCTServer) Map(context.Context, *MapRequest) (*MapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Map not implemented")
}
func (*UnimplementedSnomedCTServer) Subsumes(context.Context, *SubsumptionRequest) (*SubsumptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subsumes not implemented")
}
func (*UnimplementedSnomedCTServer) Parse(context.Context, *ParseRequest) (*Expression, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Parse not implemented")
}
func (*UnimplementedSnomedCTServer) Refinements(context.Context, *RefinementRequest) (*RefinementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refinements not implemented")
}

func RegisterSnomedCTServer(s *grpc.Server, srv SnomedCTServer) {
	s.RegisterService(&_SnomedCT_serviceDesc, srv)
}

func _SnomedCT_GetConcept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SctID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnomedCTServer).GetConcept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snomed.SnomedCT/GetConcept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnomedCTServer).GetConcept(ctx, req.(*SctID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnomedCT_GetExtendedConcept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SctID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnomedCTServer).GetExtendedConcept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snomed.SnomedCT/GetExtendedConcept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnomedCTServer).GetExtendedConcept(ctx, req.(*SctID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnomedCT_GetDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SctID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnomedCTServer).GetDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snomed.SnomedCT/GetDescriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnomedCTServer).GetDescriptions(ctx, req.(*SctID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnomedCT_GetReferenceSets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SctID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnomedCTServer).GetReferenceSets(m, &snomedCTGetReferenceSetsServer{stream})
}

type SnomedCT_GetReferenceSetsServer interface {
	Send(*ReferenceSetItem) error
	grpc.ServerStream
}

type snomedCTGetReferenceSetsServer struct {
	grpc.ServerStream
}

func (x *snomedCTGetReferenceSetsServer) Send(m *ReferenceSetItem) error {
	return x.ServerStream.SendMsg(m)
}

func _SnomedCT_GetAllChildren_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SctID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnomedCTServer).GetAllChildren(m, &snomedCTGetAllChildrenServer{stream})
}

type SnomedCT_GetAllChildrenServer interface {
	Send(*ConceptReference) error
	grpc.ServerStream
}

type snomedCTGetAllChildrenServer struct {
	grpc.ServerStream
}

func (x *snomedCTGetAllChildrenServer) Send(m *ConceptReference) error {
	return x.ServerStream.SendMsg(m)
}

func _SnomedCT_GetDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SctID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnomedCTServer).GetDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snomed.SnomedCT/GetDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnomedCTServer).GetDescription(ctx, req.(*SctID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnomedCT_GetReferenceSetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReferenceSetItemID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnomedCTServer).GetReferenceSetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snomed.SnomedCT/GetReferenceSetItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnomedCTServer).GetReferenceSetItem(ctx, req.(*ReferenceSetItemID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnomedCT_CrossMap_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CrossMapRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnomedCTServer).CrossMap(m, &snomedCTCrossMapServer{stream})
}

type SnomedCT_CrossMapServer interface {
	Send(*ReferenceSetItem) error
	grpc.ServerStream
}

type snomedCTCrossMapServer struct {
	grpc.ServerStream
}

func (x *snomedCTCrossMapServer) Send(m *ReferenceSetItem) error {
	return x.ServerStream.SendMsg(m)
}

func _SnomedCT_FromCrossMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslateFromRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnomedCTServer).FromCrossMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snomed.SnomedCT/FromCrossMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnomedCTServer).FromCrossMap(ctx, req.(*TranslateFromRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnomedCT_Map_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnomedCTServer).Map(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snomed.SnomedCT/Map",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnomedCTServer).Map(ctx, req.(*MapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnomedCT_Subsumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubsumptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnomedCTServer).Subsumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snomed.SnomedCT/Subsumes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnomedCTServer).Subsumes(ctx, req.(*SubsumptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnomedCT_Parse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnomedCTServer).Parse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snomed.SnomedCT/Parse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnomedCTServer).Parse(ctx, req.(*ParseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnomedCT_Refinements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefinementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnomedCTServer).Refinements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snomed.SnomedCT/Refinements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnomedCTServer).Refinements(ctx, req.(*RefinementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SnomedCT_serviceDesc = grpc.ServiceDesc{
	ServiceName: "snomed.SnomedCT",
	HandlerType: (*SnomedCTServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConcept",
			Handler:    _SnomedCT_GetConcept_Handler,
		},
		{
			MethodName: "GetExtendedConcept",
			Handler:    _SnomedCT_GetExtendedConcept_Handler,
		},
		{
			MethodName: "GetDescriptions",
			Handler:    _SnomedCT_GetDescriptions_Handler,
		},
		{
			MethodName: "GetDescription",
			Handler:    _SnomedCT_GetDescription_Handler,
		},
		{
			MethodName: "GetReferenceSetItem",
			Handler:    _SnomedCT_GetReferenceSetItem_Handler,
		},
		{
			MethodName: "FromCrossMap",
			Handler:    _SnomedCT_FromCrossMap_Handler,
		},
		{
			MethodName: "Map",
			Handler:    _SnomedCT_Map_Handler,
		},
		{
			MethodName: "Subsumes",
			Handler:    _SnomedCT_Subsumes_Handler,
		},
		{
			MethodName: "Parse",
			Handler:    _SnomedCT_Parse_Handler,
		},
		{
			MethodName: "Refinements",
			Handler:    _SnomedCT_Refinements_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetReferenceSets",
			Handler:       _SnomedCT_GetReferenceSets_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllChildren",
			Handler:       _SnomedCT_GetAllChildren_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CrossMap",
			Handler:       _SnomedCT_CrossMap_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server.proto",
}

// SearchClient is the client API for Search service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SearchClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	Extract(ctx context.Context, in *ExtractRequest, opts ...grpc.CallOption) (*ExtractResponse, error)
	Synonyms(ctx context.Context, in *SynonymRequest, opts ...grpc.CallOption) (Search_SynonymsClient, error)
}

type searchClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchClient(cc grpc.ClientConnInterface) SearchClient {
	return &searchClient{cc}
}

func (c *searchClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/snomed.Search/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) Extract(ctx context.Context, in *ExtractRequest, opts ...grpc.CallOption) (*ExtractResponse, error) {
	out := new(ExtractResponse)
	err := c.cc.Invoke(ctx, "/snomed.Search/Extract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) Synonyms(ctx context.Context, in *SynonymRequest, opts ...grpc.CallOption) (Search_SynonymsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Search_serviceDesc.Streams[0], "/snomed.Search/Synonyms", opts...)
	if err != nil {
		return nil, err
	}
	x := &searchSynonymsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Search_SynonymsClient interface {
	Recv() (*SynonymResponseItem, error)
	grpc.ClientStream
}

type searchSynonymsClient struct {
	grpc.ClientStream
}

func (x *searchSynonymsClient) Recv() (*SynonymResponseItem, error) {
	m := new(SynonymResponseItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SearchServer is the server API for Search service.
type SearchServer interface {
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	Extract(context.Context, *ExtractRequest) (*ExtractResponse, error)
	Synonyms(*SynonymRequest, Search_SynonymsServer) error
}

// UnimplementedSearchServer can be embedded to have forward compatible implementations.
type UnimplementedSearchServer struct {
}

func (*UnimplementedSearchServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedSearchServer) Extract(context.Context, *ExtractRequest) (*ExtractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Extract not implemented")
}
func (*UnimplementedSearchServer) Synonyms(*SynonymRequest, Search_SynonymsServer) error {
	return status.Errorf(codes.Unimplemented, "method Synonyms not implemented")
}

func RegisterSearchServer(s *grpc.Server, srv SearchServer) {
	s.RegisterService(&_Search_serviceDesc, srv)
}

func _Search_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snomed.Search/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_Extract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).Extract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snomed.Search/Extract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).Extract(ctx, req.(*ExtractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_Synonyms_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SynonymRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SearchServer).Synonyms(m, &searchSynonymsServer{stream})
}

type Search_SynonymsServer interface {
	Send(*SynonymResponseItem) error
	grpc.ServerStream
}

type searchSynonymsServer struct {
	grpc.ServerStream
}

func (x *searchSynonymsServer) Send(m *SynonymResponseItem) error {
	return x.ServerStream.SendMsg(m)
}

var _Search_serviceDesc = grpc.ServiceDesc{
	ServiceName: "snomed.Search",
	HandlerType: (*SearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _Search_Search_Handler,
		},
		{
			MethodName: "Extract",
			Handler:    _Search_Extract_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Synonyms",
			Handler:       _Search_Synonyms_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server.proto",
}
