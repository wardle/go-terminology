// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: snomed.proto

package snomed

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Expression_DefinitionStatus int32

const (
	Expression_EQUIVALENT_TO Expression_DefinitionStatus = 0 // default, if omitted
	Expression_SUBTYPE_OF    Expression_DefinitionStatus = 1
)

// Enum value maps for Expression_DefinitionStatus.
var (
	Expression_DefinitionStatus_name = map[int32]string{
		0: "EQUIVALENT_TO",
		1: "SUBTYPE_OF",
	}
	Expression_DefinitionStatus_value = map[string]int32{
		"EQUIVALENT_TO": 0,
		"SUBTYPE_OF":    1,
	}
)

func (x Expression_DefinitionStatus) Enum() *Expression_DefinitionStatus {
	p := new(Expression_DefinitionStatus)
	*p = x
	return p
}

func (x Expression_DefinitionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Expression_DefinitionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_snomed_proto_enumTypes[0].Descriptor()
}

func (Expression_DefinitionStatus) Type() protoreflect.EnumType {
	return &file_snomed_proto_enumTypes[0]
}

func (x Expression_DefinitionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Expression_DefinitionStatus.Descriptor instead.
func (Expression_DefinitionStatus) EnumDescriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{15, 0}
}

type SubsumptionResponse_Result int32

const (
	SubsumptionResponse_EQUIVALENT   SubsumptionResponse_Result = 0
	SubsumptionResponse_SUBSUMES     SubsumptionResponse_Result = 1 // A subsumes B
	SubsumptionResponse_SUBSUMED_BY  SubsumptionResponse_Result = 2 // B subsumes A
	SubsumptionResponse_NOT_SUBSUMED SubsumptionResponse_Result = 3 // not subsumed
)

// Enum value maps for SubsumptionResponse_Result.
var (
	SubsumptionResponse_Result_name = map[int32]string{
		0: "EQUIVALENT",
		1: "SUBSUMES",
		2: "SUBSUMED_BY",
		3: "NOT_SUBSUMED",
	}
	SubsumptionResponse_Result_value = map[string]int32{
		"EQUIVALENT":   0,
		"SUBSUMES":     1,
		"SUBSUMED_BY":  2,
		"NOT_SUBSUMED": 3,
	}
)

func (x SubsumptionResponse_Result) Enum() *SubsumptionResponse_Result {
	p := new(SubsumptionResponse_Result)
	*p = x
	return p
}

func (x SubsumptionResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubsumptionResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_snomed_proto_enumTypes[1].Descriptor()
}

func (SubsumptionResponse_Result) Type() protoreflect.EnumType {
	return &file_snomed_proto_enumTypes[1]
}

func (x SubsumptionResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubsumptionResponse_Result.Descriptor instead.
func (SubsumptionResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{17, 0}
}

type MapRequest_Parents int32

const (
	MapRequest_FALLBACK MapRequest_Parents = 0 // include parents only if conventional map to target set fails
	MapRequest_ALWAYS   MapRequest_Parents = 1 // include parents always
	MapRequest_NEVER    MapRequest_Parents = 2 // do not include parents
)

// Enum value maps for MapRequest_Parents.
var (
	MapRequest_Parents_name = map[int32]string{
		0: "FALLBACK",
		1: "ALWAYS",
		2: "NEVER",
	}
	MapRequest_Parents_value = map[string]int32{
		"FALLBACK": 0,
		"ALWAYS":   1,
		"NEVER":    2,
	}
)

func (x MapRequest_Parents) Enum() *MapRequest_Parents {
	p := new(MapRequest_Parents)
	*p = x
	return p
}

func (x MapRequest_Parents) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MapRequest_Parents) Descriptor() protoreflect.EnumDescriptor {
	return file_snomed_proto_enumTypes[2].Descriptor()
}

func (MapRequest_Parents) Type() protoreflect.EnumType {
	return &file_snomed_proto_enumTypes[2]
}

func (x MapRequest_Parents) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MapRequest_Parents.Descriptor instead.
func (MapRequest_Parents) EnumDescriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{23, 0}
}

type SearchRequest_Fuzzy int32

const (
	SearchRequest_FALLBACK_FUZZY SearchRequest_Fuzzy = 0 // try a fuzzy match only if there are no results without using fuzzy
	SearchRequest_ALWAYS_FUZZY   SearchRequest_Fuzzy = 1 // use fuzzy for the search
	SearchRequest_NO_FUZZY       SearchRequest_Fuzzy = 2 // do not use fuzzy matching at all
)

// Enum value maps for SearchRequest_Fuzzy.
var (
	SearchRequest_Fuzzy_name = map[int32]string{
		0: "FALLBACK_FUZZY",
		1: "ALWAYS_FUZZY",
		2: "NO_FUZZY",
	}
	SearchRequest_Fuzzy_value = map[string]int32{
		"FALLBACK_FUZZY": 0,
		"ALWAYS_FUZZY":   1,
		"NO_FUZZY":       2,
	}
)

func (x SearchRequest_Fuzzy) Enum() *SearchRequest_Fuzzy {
	p := new(SearchRequest_Fuzzy)
	*p = x
	return p
}

func (x SearchRequest_Fuzzy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchRequest_Fuzzy) Descriptor() protoreflect.EnumDescriptor {
	return file_snomed_proto_enumTypes[3].Descriptor()
}

func (SearchRequest_Fuzzy) Type() protoreflect.EnumType {
	return &file_snomed_proto_enumTypes[3]
}

func (x SearchRequest_Fuzzy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchRequest_Fuzzy.Descriptor instead.
func (SearchRequest_Fuzzy) EnumDescriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{28, 0}
}

// A Concept represents a SNOMED-CT concept.
// The RF2 release allows multiple duplicate entries per concept identifier to permit versioning.
// As such, we have a compound primary key made up of the concept identifier and the effective time.
// Only one concept with a specified identifier will be active at any time point.
// See https://confluence.ihtsdotools.org/display/DOCRELFMT/3.2.1.+Concept+File+Specification
type Concept struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                             // Uniquely identifies the concept.
	EffectiveTime      *timestamp.Timestamp `protobuf:"bytes,2,opt,name=effective_time,json=effectiveTime,proto3" json:"effective_time,omitempty"`                   // Specifies the inclusive date at which the component version's state became the then current valid state of the component
	Active             bool                 `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`                                                     // Specifies whether the concept was active or inactive from the nominal release date specified by the effectiveTime.
	ModuleId           int64                `protobuf:"varint,4,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`                                 // Identifies the concept version's module. Set to a descendant of 900000000000443000 |Module|within the metadata hierarchy.
	DefinitionStatusId int64                `protobuf:"varint,5,opt,name=definition_status_id,json=definitionStatusId,proto3" json:"definition_status_id,omitempty"` // Specifies if the concept version is primitive or sufficiently defined. Set to a descendant of 900000000000444006 |Definition status|in the metadata hierarchy.
}

func (x *Concept) Reset() {
	*x = Concept{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Concept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Concept) ProtoMessage() {}

func (x *Concept) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Concept.ProtoReflect.Descriptor instead.
func (*Concept) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{0}
}

func (x *Concept) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Concept) GetEffectiveTime() *timestamp.Timestamp {
	if x != nil {
		return x.EffectiveTime
	}
	return nil
}

func (x *Concept) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Concept) GetModuleId() int64 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

func (x *Concept) GetDefinitionStatusId() int64 {
	if x != nil {
		return x.DefinitionStatusId
	}
	return 0
}

// A Description holds descriptions that describe SNOMED CT concepts.
// A description is used to give meaning to a concept and provide well-understood and standard ways of referring to a concept.
// See https://confluence.ihtsdotools.org/display/DOCRELFMT/3.2.2.+Description+File+Specification
type Description struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                     // Uniquely identifies the description.
	EffectiveTime    *timestamp.Timestamp `protobuf:"bytes,2,opt,name=effective_time,json=effectiveTime,proto3" json:"effective_time,omitempty"`           // Specifies the inclusive date at which the component version's state became the then current valid state of the component
	Active           bool                 `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`                                             // Specifies whether the state of the description was active or inactive from the nominal release date specified by the effectiveTime .
	ModuleId         int64                `protobuf:"varint,4,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`                         // Identifies the description version's module. Set to a child of 900000000000443000 |Module|within the metadata hierarchy.
	ConceptId        int64                `protobuf:"varint,5,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`                      // Identifies the concept to which this description applies. Set to the identifier of a concept in the 138875005 |SNOMED CT Concept| hierarchy within the Concept.
	LanguageCode     string               `protobuf:"bytes,6,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`              // Specifies the language of the description text using the two character ISO-639-1 code. Note that this specifies a language level only, not a dialect or country code.
	TypeId           int64                `protobuf:"varint,7,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`                               // Identifies whether the description is fully specified name a synonym or other description type. This field is set to a child of 900000000000446008 |Description type|in the Metadata hierarchy.
	Term             string               `protobuf:"bytes,8,opt,name=term,proto3" json:"term,omitempty"`                                                  // The description version's text value, represented in UTF-8 encoding.
	CaseSignificance int64                `protobuf:"varint,9,opt,name=case_significance,json=caseSignificance,proto3" json:"case_significance,omitempty"` // Identifies the concept enumeration value that represents the case significance of this description version. For example, the term may be completely case sensitive, case insensitive or initial letter case insensitive. This field will be set to a child of 900000000000447004 |Case significance|within the metadata hierarchy.
}

func (x *Description) Reset() {
	*x = Description{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Description) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Description) ProtoMessage() {}

func (x *Description) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Description.ProtoReflect.Descriptor instead.
func (*Description) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{1}
}

func (x *Description) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Description) GetEffectiveTime() *timestamp.Timestamp {
	if x != nil {
		return x.EffectiveTime
	}
	return nil
}

func (x *Description) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Description) GetModuleId() int64 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

func (x *Description) GetConceptId() int64 {
	if x != nil {
		return x.ConceptId
	}
	return 0
}

func (x *Description) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *Description) GetTypeId() int64 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *Description) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *Description) GetCaseSignificance() int64 {
	if x != nil {
		return x.CaseSignificance
	}
	return 0
}

// Relationship defines a relationship between two concepts as a type itself defined as a concept
type Relationship struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                   // Uniquely identifies the relationship.
	EffectiveTime        *timestamp.Timestamp `protobuf:"bytes,2,opt,name=effective_time,json=effectiveTime,proto3" json:"effective_time,omitempty"`                         // Specifies the inclusive date at which the component version's state became the then current valid state of the component
	Active               bool                 `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`                                                           // Specifies whether the state of the relationship was active or inactive from the nominal release date specified by the effectiveTime field.
	ModuleId             int64                `protobuf:"varint,4,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`                                       // Identifies the relationship version's module. Set to a child of 900000000000443000 |Module|within the metadata hierarchy.
	SourceId             int64                `protobuf:"varint,5,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`                                       // Identifies the source concept of the relationship version. That is the concept defined by this relationship. Set to the identifier of a concept. in the Concept File.
	DestinationId        int64                `protobuf:"varint,6,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`                        // Identifies the concept that is the destination of the relationship version.
	RelationshipGroup    int64                `protobuf:"varint,7,opt,name=relationship_group,json=relationshipGroup,proto3" json:"relationship_group,omitempty"`            // Groups together relationship versions that are part of a logically associated relationshipGroup. All active Relationship records with the same relationshipGroup number and sourceId are grouped in this way.
	TypeId               int64                `protobuf:"varint,8,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`                                             // Identifies the concept that represent the defining attribute (or relationship type) represented by this relationship version.
	CharacteristicTypeId int64                `protobuf:"varint,9,opt,name=characteristic_type_id,json=characteristicTypeId,proto3" json:"characteristic_type_id,omitempty"` // A concept enumeration value that identifies the characteristic type of the relationship version (i.e. whether the relationship version is defining, qualifying, etc.) This field is set to a descendant of 900000000000449001 |Characteristic type|in the metadata hierarchy.
	ModifierId           int64                `protobuf:"varint,10,opt,name=modifier_id,json=modifierId,proto3" json:"modifier_id,omitempty"`                                // Ignore. A concept enumeration value that identifies the type of Description Logic (DL) restriction (some, all, etc.).
}

func (x *Relationship) Reset() {
	*x = Relationship{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relationship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relationship) ProtoMessage() {}

func (x *Relationship) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relationship.ProtoReflect.Descriptor instead.
func (*Relationship) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{2}
}

func (x *Relationship) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Relationship) GetEffectiveTime() *timestamp.Timestamp {
	if x != nil {
		return x.EffectiveTime
	}
	return nil
}

func (x *Relationship) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Relationship) GetModuleId() int64 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

func (x *Relationship) GetSourceId() int64 {
	if x != nil {
		return x.SourceId
	}
	return 0
}

func (x *Relationship) GetDestinationId() int64 {
	if x != nil {
		return x.DestinationId
	}
	return 0
}

func (x *Relationship) GetRelationshipGroup() int64 {
	if x != nil {
		return x.RelationshipGroup
	}
	return 0
}

func (x *Relationship) GetTypeId() int64 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *Relationship) GetCharacteristicTypeId() int64 {
	if x != nil {
		return x.CharacteristicTypeId
	}
	return 0
}

func (x *Relationship) GetModifierId() int64 {
	if x != nil {
		return x.ModifierId
	}
	return 0
}

// ReferenceSet support customization and enhancement of SNOMED CT content. These include representation of subsets,
// language preferences maps for or from other code systems.
// There are multiple reference set types which extend this structure
// In the specification, the referenced component ID can be a SCT identifier or a UUID which is... problematic.
// In this structure, the referenced component ID is a SCT identifier... only. For now.
// Fortunately, in concrete types of reference set ("patterns"), it is made explicit.
type ReferenceSetItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                       // A 128 bit unsigned Integer, uniquely identifying the reference set member.
	EffectiveTime         *timestamp.Timestamp `protobuf:"bytes,2,opt,name=effective_time,json=effectiveTime,proto3" json:"effective_time,omitempty"`                            // Specifies the inclusive date at which this change becomes effective.
	Active                bool                 `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`                                                              // Specifies whether the member's state was active or inactive from the nominal release date specified by the effectiveTime field.
	ModuleId              int64                `protobuf:"varint,4,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`                                          // Identifies the member version's module. Set to a child of 900000000000443000 |Module| within the metadata hierarchy .
	RefsetId              int64                `protobuf:"varint,5,opt,name=refset_id,json=refsetId,proto3" json:"refset_id,omitempty"`                                          // Uniquely identifies the reference set that this extension row is part of. Set to a descendant of 900000000000455006 |Reference set| within the metadata hierarchy .
	ReferencedComponentId int64                `protobuf:"varint,6,opt,name=referenced_component_id,json=referencedComponentId,proto3" json:"referenced_component_id,omitempty"` // A reference to the SNOMED CT component to be included in the reference set.
	// Types that are assignable to Body:
	//	*ReferenceSetItem_RefsetDescriptor
	//	*ReferenceSetItem_Simple
	//	*ReferenceSetItem_Language
	//	*ReferenceSetItem_SimpleMap
	//	*ReferenceSetItem_ComplexMap
	//	*ReferenceSetItem_AttributeValue
	//	*ReferenceSetItem_Association
	Body isReferenceSetItem_Body `protobuf_oneof:"body"`
}

func (x *ReferenceSetItem) Reset() {
	*x = ReferenceSetItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceSetItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceSetItem) ProtoMessage() {}

func (x *ReferenceSetItem) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceSetItem.ProtoReflect.Descriptor instead.
func (*ReferenceSetItem) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{3}
}

func (x *ReferenceSetItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReferenceSetItem) GetEffectiveTime() *timestamp.Timestamp {
	if x != nil {
		return x.EffectiveTime
	}
	return nil
}

func (x *ReferenceSetItem) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *ReferenceSetItem) GetModuleId() int64 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

func (x *ReferenceSetItem) GetRefsetId() int64 {
	if x != nil {
		return x.RefsetId
	}
	return 0
}

func (x *ReferenceSetItem) GetReferencedComponentId() int64 {
	if x != nil {
		return x.ReferencedComponentId
	}
	return 0
}

func (m *ReferenceSetItem) GetBody() isReferenceSetItem_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *ReferenceSetItem) GetRefsetDescriptor() *RefSetDescriptorReferenceSet {
	if x, ok := x.GetBody().(*ReferenceSetItem_RefsetDescriptor); ok {
		return x.RefsetDescriptor
	}
	return nil
}

func (x *ReferenceSetItem) GetSimple() *SimpleReferenceSet {
	if x, ok := x.GetBody().(*ReferenceSetItem_Simple); ok {
		return x.Simple
	}
	return nil
}

func (x *ReferenceSetItem) GetLanguage() *LanguageReferenceSet {
	if x, ok := x.GetBody().(*ReferenceSetItem_Language); ok {
		return x.Language
	}
	return nil
}

func (x *ReferenceSetItem) GetSimpleMap() *SimpleMapReferenceSet {
	if x, ok := x.GetBody().(*ReferenceSetItem_SimpleMap); ok {
		return x.SimpleMap
	}
	return nil
}

func (x *ReferenceSetItem) GetComplexMap() *ComplexMapReferenceSet {
	if x, ok := x.GetBody().(*ReferenceSetItem_ComplexMap); ok {
		return x.ComplexMap
	}
	return nil
}

func (x *ReferenceSetItem) GetAttributeValue() *AttributeValueReferenceSet {
	if x, ok := x.GetBody().(*ReferenceSetItem_AttributeValue); ok {
		return x.AttributeValue
	}
	return nil
}

func (x *ReferenceSetItem) GetAssociation() *AssociationReferenceSet {
	if x, ok := x.GetBody().(*ReferenceSetItem_Association); ok {
		return x.Association
	}
	return nil
}

type isReferenceSetItem_Body interface {
	isReferenceSetItem_Body()
}

type ReferenceSetItem_RefsetDescriptor struct {
	RefsetDescriptor *RefSetDescriptorReferenceSet `protobuf:"bytes,7,opt,name=refset_descriptor,json=refsetDescriptor,proto3,oneof"`
}

type ReferenceSetItem_Simple struct {
	Simple *SimpleReferenceSet `protobuf:"bytes,8,opt,name=simple,proto3,oneof"`
}

type ReferenceSetItem_Language struct {
	Language *LanguageReferenceSet `protobuf:"bytes,9,opt,name=language,proto3,oneof"`
}

type ReferenceSetItem_SimpleMap struct {
	SimpleMap *SimpleMapReferenceSet `protobuf:"bytes,10,opt,name=simple_map,json=simpleMap,proto3,oneof"`
}

type ReferenceSetItem_ComplexMap struct {
	ComplexMap *ComplexMapReferenceSet `protobuf:"bytes,11,opt,name=complex_map,json=complexMap,proto3,oneof"`
}

type ReferenceSetItem_AttributeValue struct {
	AttributeValue *AttributeValueReferenceSet `protobuf:"bytes,12,opt,name=attribute_value,json=attributeValue,proto3,oneof"`
}

type ReferenceSetItem_Association struct {
	Association *AssociationReferenceSet `protobuf:"bytes,13,opt,name=association,proto3,oneof"`
}

func (*ReferenceSetItem_RefsetDescriptor) isReferenceSetItem_Body() {}

func (*ReferenceSetItem_Simple) isReferenceSetItem_Body() {}

func (*ReferenceSetItem_Language) isReferenceSetItem_Body() {}

func (*ReferenceSetItem_SimpleMap) isReferenceSetItem_Body() {}

func (*ReferenceSetItem_ComplexMap) isReferenceSetItem_Body() {}

func (*ReferenceSetItem_AttributeValue) isReferenceSetItem_Body() {}

func (*ReferenceSetItem_Association) isReferenceSetItem_Body() {}

// RefSetDescriptorReferenceSet is a type of reference set that provides information about a different reference set
// See https://confluence.ihtsdotools.org/display/DOCRELFMT/4.2.11.+Reference+Set+Descriptor
// It provides the additional structure for a given reference set.
type RefSetDescriptorReferenceSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeDescriptionId int64  `protobuf:"varint,1,opt,name=attribute_description_id,json=attributeDescriptionId,proto3" json:"attribute_description_id,omitempty"` // Specifies the name of an attribute that is used in the reference set to which this descriptor applies.
	AttributeTypeId        int64  `protobuf:"varint,2,opt,name=attribute_type_id,json=attributeTypeId,proto3" json:"attribute_type_id,omitempty"`                      // Specifies the data type of this attribute in the reference set to which this descriptor applies.
	AttributeOrder         uint32 `protobuf:"varint,3,opt,name=attribute_order,json=attributeOrder,proto3" json:"attribute_order,omitempty"`                           // An unsigned Integer, providing an ordering for the additional attributes extending the reference set .
}

func (x *RefSetDescriptorReferenceSet) Reset() {
	*x = RefSetDescriptorReferenceSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefSetDescriptorReferenceSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefSetDescriptorReferenceSet) ProtoMessage() {}

func (x *RefSetDescriptorReferenceSet) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefSetDescriptorReferenceSet.ProtoReflect.Descriptor instead.
func (*RefSetDescriptorReferenceSet) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{4}
}

func (x *RefSetDescriptorReferenceSet) GetAttributeDescriptionId() int64 {
	if x != nil {
		return x.AttributeDescriptionId
	}
	return 0
}

func (x *RefSetDescriptorReferenceSet) GetAttributeTypeId() int64 {
	if x != nil {
		return x.AttributeTypeId
	}
	return 0
}

func (x *RefSetDescriptorReferenceSet) GetAttributeOrder() uint32 {
	if x != nil {
		return x.AttributeOrder
	}
	return 0
}

// SimpleReferenceSet is a simple reference set usable for defining subsets
// See https://confluence.ihtsdotools.org/display/DOCRELFMT/4.2.1.+Simple+Reference+Set
type SimpleReferenceSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SimpleReferenceSet) Reset() {
	*x = SimpleReferenceSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleReferenceSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleReferenceSet) ProtoMessage() {}

func (x *SimpleReferenceSet) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleReferenceSet.ProtoReflect.Descriptor instead.
func (*SimpleReferenceSet) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{5}
}

// LanguageReferenceSet is a A 900000000000506000 |Language type reference set| supporting the representation of
// language and dialects preferences for the use of particular descriptions.
// "The most common use case for this type of reference set is to specify the acceptable and preferred terms
// for use within a particular country or region. However, the same type of reference set can also be used to
// represent preferences for use of descriptions in a more specific context such as a clinical specialty,
// organization or department.
//
// No more than one description of a specific description type associated with a single concept may have the acceptabilityId value 900000000000548007 |Preferred|.
// Every active concept should have one preferred synonym in each language.
// This means that a language reference set should assign the acceptabilityId  900000000000548007 |Preferred|  to one  synonym (a  description with  typeId value 900000000000013009 |synonym|) associated with each concept .
// This description is the preferred term for that concept in the specified language or dialect.
// Any  description which is not referenced by an active row in the   reference set is regarded as unacceptable (i.e. not a valid  synonym in the language or  dialect ).
// If a description becomes unacceptable, the relevant language reference set member is inactivated by adding a new row with the same id, the effectiveTime of the the change and the value active=0.
// For this reason there is no requirement for an "unacceptable" value."
// See https://confluence.ihtsdotools.org/display/DOCRELFMT/4.2.4.+Language+Reference+Set
//
type LanguageReferenceSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcceptabilityId int64 `protobuf:"varint,1,opt,name=acceptability_id,json=acceptabilityId,proto3" json:"acceptability_id,omitempty"` // A subtype of 900000000000511003 |Acceptability| indicating whether the description is acceptable or preferred for use in the specified language or dialect .
}

func (x *LanguageReferenceSet) Reset() {
	*x = LanguageReferenceSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanguageReferenceSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanguageReferenceSet) ProtoMessage() {}

func (x *LanguageReferenceSet) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanguageReferenceSet.ProtoReflect.Descriptor instead.
func (*LanguageReferenceSet) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{6}
}

func (x *LanguageReferenceSet) GetAcceptabilityId() int64 {
	if x != nil {
		return x.AcceptabilityId
	}
	return 0
}

// SimpleMapReferenceSet is a straightforward one-to-one map between SNOMED-CT concepts and another
// coding system. This is appropriate for simple maps.
// See https://confluence.ihtsdotools.org/display/DOCRELFMT/4.2.9.+Simple+Map+Reference+Set
type SimpleMapReferenceSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapTarget string `protobuf:"bytes,1,opt,name=map_target,json=mapTarget,proto3" json:"map_target,omitempty"` // The equivalent code in the other terminology, classification or code system.
}

func (x *SimpleMapReferenceSet) Reset() {
	*x = SimpleMapReferenceSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleMapReferenceSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleMapReferenceSet) ProtoMessage() {}

func (x *SimpleMapReferenceSet) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleMapReferenceSet.ProtoReflect.Descriptor instead.
func (*SimpleMapReferenceSet) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{7}
}

func (x *SimpleMapReferenceSet) GetMapTarget() string {
	if x != nil {
		return x.MapTarget
	}
	return ""
}

// ComplexMapReferenceSet represents a complex one-to-many map between SNOMED-CT and another
// coding system.
// A 447250001 |Complex map type reference set|enables representation of maps where each SNOMED
// CT concept may map to one or more codes in a target scheme.
// The type of reference set supports the general set of mapping data required to enable a
// target code to be selected at run-time from a number of alternate codes. It supports
// target code selection by accommodating the inclusion of machine readable rules and/or human readable advice.
// An 609331003 |Extended map type reference set|adds an additional field to allow categorization of maps.
// Unfortunately, the documentation for complex and extended reference sets is out of date.
// https://confluence.ihtsdotools.org/display/DOCRELFMT/5.2.10+Complex+and+Extended+Map+Reference+Sets
// A complex map includes an undocumented "map block", and an extended map contains a "category".
// Rather than using a oneof {}, I have quite deliberately kept both.
type ComplexMapReferenceSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapGroup    int64  `protobuf:"varint,1,opt,name=map_group,json=mapGroup,proto3" json:"map_group,omitempty"`          // An Integer, grouping a set of complex map records from which one may be selected as a target code.
	MapPriority int64  `protobuf:"varint,2,opt,name=map_priority,json=mapPriority,proto3" json:"map_priority,omitempty"` // Within a mapGroup, the mapPriority specifies the order in which complex map records should be checked
	MapRule     string `protobuf:"bytes,3,opt,name=map_rule,json=mapRule,proto3" json:"map_rule,omitempty"`              // A machine-readable rule, (evaluating to either 'true' or 'false' at run-time) that indicates whether this map record should be selected within its mapGroup.
	MapAdvice   string `protobuf:"bytes,4,opt,name=map_advice,json=mapAdvice,proto3" json:"map_advice,omitempty"`        // Human-readable advice, that may be employed by the software vendor to give an end-user advice on selection of the appropriate target code from the alternatives presented to him within the group.
	MapTarget   string `protobuf:"bytes,5,opt,name=map_target,json=mapTarget,proto3" json:"map_target,omitempty"`        // The target code in the target terminology, classification or code system.
	Correlation int64  `protobuf:"varint,6,opt,name=correlation,proto3" json:"correlation,omitempty"`                    // A child of 447247004 |SNOMED CT source code to target map code correlation value|in the metadata hierarchy, identifying the correlation between the SNOMED CT concept and the target code.
	MapBlock    int64  `protobuf:"varint,7,opt,name=map_block,json=mapBlock,proto3" json:"map_block,omitempty"`          // Only for complex map refsets: der2_iisssciRefset
	MapCategory int64  `protobuf:"varint,8,opt,name=map_category,json=mapCategory,proto3" json:"map_category,omitempty"` // Only for extended complex map refsets: Identifies the SNOMED CT concept in the metadata hierarchy which represents the MapCategory for the associated map member.
}

func (x *ComplexMapReferenceSet) Reset() {
	*x = ComplexMapReferenceSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplexMapReferenceSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplexMapReferenceSet) ProtoMessage() {}

func (x *ComplexMapReferenceSet) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplexMapReferenceSet.ProtoReflect.Descriptor instead.
func (*ComplexMapReferenceSet) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{8}
}

func (x *ComplexMapReferenceSet) GetMapGroup() int64 {
	if x != nil {
		return x.MapGroup
	}
	return 0
}

func (x *ComplexMapReferenceSet) GetMapPriority() int64 {
	if x != nil {
		return x.MapPriority
	}
	return 0
}

func (x *ComplexMapReferenceSet) GetMapRule() string {
	if x != nil {
		return x.MapRule
	}
	return ""
}

func (x *ComplexMapReferenceSet) GetMapAdvice() string {
	if x != nil {
		return x.MapAdvice
	}
	return ""
}

func (x *ComplexMapReferenceSet) GetMapTarget() string {
	if x != nil {
		return x.MapTarget
	}
	return ""
}

func (x *ComplexMapReferenceSet) GetCorrelation() int64 {
	if x != nil {
		return x.Correlation
	}
	return 0
}

func (x *ComplexMapReferenceSet) GetMapBlock() int64 {
	if x != nil {
		return x.MapBlock
	}
	return 0
}

func (x *ComplexMapReferenceSet) GetMapCategory() int64 {
	if x != nil {
		return x.MapCategory
	}
	return 0
}

// AttributeValueReferenceSet provides a way to associate arbitrary attributes with a SNOMED-CT component
// See https://confluence.ihtsdotools.org/display/DOCRELFMT/5.2.3+Attribute+Value+Reference+Set
type AttributeValueReferenceSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueId int64 `protobuf:"varint,1,opt,name=value_id,json=valueId,proto3" json:"value_id,omitempty"` //The tagged value applied to the referencedComponentId. A subtype of 900000000000491004 |Attribute value|.
}

func (x *AttributeValueReferenceSet) Reset() {
	*x = AttributeValueReferenceSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeValueReferenceSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeValueReferenceSet) ProtoMessage() {}

func (x *AttributeValueReferenceSet) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeValueReferenceSet.ProtoReflect.Descriptor instead.
func (*AttributeValueReferenceSet) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{9}
}

func (x *AttributeValueReferenceSet) GetValueId() int64 {
	if x != nil {
		return x.ValueId
	}
	return 0
}

// AssociationReferenceSet provides a way to associate one component with another, with meaning
// defined by the refset itself.
// See https://confluence.ihtsdotools.org/display/DOCRELFMT/5.2.5+Association+Reference+Set
type AssociationReferenceSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetComponentId int64 `protobuf:"varint,1,opt,name=target_component_id,json=targetComponentId,proto3" json:"target_component_id,omitempty"`
}

func (x *AssociationReferenceSet) Reset() {
	*x = AssociationReferenceSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssociationReferenceSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssociationReferenceSet) ProtoMessage() {}

func (x *AssociationReferenceSet) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssociationReferenceSet.ProtoReflect.Descriptor instead.
func (*AssociationReferenceSet) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{10}
}

func (x *AssociationReferenceSet) GetTargetComponentId() int64 {
	if x != nil {
		return x.TargetComponentId
	}
	return 0
}

// ExtendedConcept represents a concept together with
// sufficient additional contextual information relating to the
// concept, including reference set membership as well as
// the underlying concept, the concept's relationships and
// the concept's membership of reference sets, and ways that
// this concept can be refined.
// It is, in essence, a denormalised entity, useful for
// wire-exchange purposes and caching.
type ExtendedConcept struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Concept              *Concept        `protobuf:"bytes,1,opt,name=concept,proto3" json:"concept,omitempty"`
	Relationships        []*Relationship `protobuf:"bytes,2,rep,name=relationships,proto3" json:"relationships,omitempty"`                                           // (parent) relationships for this concept
	PreferredDescription *Description    `protobuf:"bytes,3,opt,name=preferred_description,json=preferredDescription,proto3" json:"preferred_description,omitempty"` // cached preferred synonym
	AllParentIds         []int64         `protobuf:"varint,4,rep,packed,name=all_parent_ids,json=allParentIds,proto3" json:"all_parent_ids,omitempty"`               // list of all (recursive) IS-A parents for concept
	DirectParentIds      []int64         `protobuf:"varint,5,rep,packed,name=direct_parent_ids,json=directParentIds,proto3" json:"direct_parent_ids,omitempty"`      // list of direct IS-A parents for concept
	ConceptRefsets       []int64         `protobuf:"varint,6,rep,packed,name=concept_refsets,json=conceptRefsets,proto3" json:"concept_refsets,omitempty"`           // refsets to which the concept belong
	Descriptions         []*Description  `protobuf:"bytes,7,rep,name=descriptions,proto3" json:"descriptions,omitempty"`                                             // all descriptions
}

func (x *ExtendedConcept) Reset() {
	*x = ExtendedConcept{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedConcept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedConcept) ProtoMessage() {}

func (x *ExtendedConcept) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedConcept.ProtoReflect.Descriptor instead.
func (*ExtendedConcept) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{11}
}

func (x *ExtendedConcept) GetConcept() *Concept {
	if x != nil {
		return x.Concept
	}
	return nil
}

func (x *ExtendedConcept) GetRelationships() []*Relationship {
	if x != nil {
		return x.Relationships
	}
	return nil
}

func (x *ExtendedConcept) GetPreferredDescription() *Description {
	if x != nil {
		return x.PreferredDescription
	}
	return nil
}

func (x *ExtendedConcept) GetAllParentIds() []int64 {
	if x != nil {
		return x.AllParentIds
	}
	return nil
}

func (x *ExtendedConcept) GetDirectParentIds() []int64 {
	if x != nil {
		return x.DirectParentIds
	}
	return nil
}

func (x *ExtendedConcept) GetConceptRefsets() []int64 {
	if x != nil {
		return x.ConceptRefsets
	}
	return nil
}

func (x *ExtendedConcept) GetDescriptions() []*Description {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

// ConceptDescriptions defined the preferred description
// and available synonyms for the concept specified.
type ConceptDescriptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Concept              *Concept       `protobuf:"bytes,1,opt,name=concept,proto3" json:"concept,omitempty"`
	PreferredDescription *Description   `protobuf:"bytes,2,opt,name=preferred_description,json=preferredDescription,proto3" json:"preferred_description,omitempty"`
	FullySpecifiedName   *Description   `protobuf:"bytes,3,opt,name=fully_specified_name,json=fullySpecifiedName,proto3" json:"fully_specified_name,omitempty"`
	Synonyms             []*Description `protobuf:"bytes,4,rep,name=synonyms,proto3" json:"synonyms,omitempty"`
	Definitions          []*Description `protobuf:"bytes,5,rep,name=definitions,proto3" json:"definitions,omitempty"`
}

func (x *ConceptDescriptions) Reset() {
	*x = ConceptDescriptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptDescriptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptDescriptions) ProtoMessage() {}

func (x *ConceptDescriptions) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptDescriptions.ProtoReflect.Descriptor instead.
func (*ConceptDescriptions) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{12}
}

func (x *ConceptDescriptions) GetConcept() *Concept {
	if x != nil {
		return x.Concept
	}
	return nil
}

func (x *ConceptDescriptions) GetPreferredDescription() *Description {
	if x != nil {
		return x.PreferredDescription
	}
	return nil
}

func (x *ConceptDescriptions) GetFullySpecifiedName() *Description {
	if x != nil {
		return x.FullySpecifiedName
	}
	return nil
}

func (x *ConceptDescriptions) GetSynonyms() []*Description {
	if x != nil {
		return x.Synonyms
	}
	return nil
}

func (x *ConceptDescriptions) GetDefinitions() []*Description {
	if x != nil {
		return x.Definitions
	}
	return nil
}

// ExtendedDescription represents a description together with
// sufficient additional contextual information relating to the
// description, including reference set membership as well as
// the underlying concept, the concept's relationships and
// the concept's membership of reference sets.
// It is, in essence, a denormalised relationship, useful for
// wire-exchange purposes.
type ExtendedDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description          *Description `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Concept              *Concept     `protobuf:"bytes,3,opt,name=concept,proto3" json:"concept,omitempty"`                                                         // concept to which this description relates
	PreferredDescription *Description `protobuf:"bytes,4,opt,name=preferred_description,json=preferredDescription,proto3" json:"preferred_description,omitempty"`   // concept's preferred description
	AllParentIds         []int64      `protobuf:"varint,5,rep,packed,name=all_parent_ids,json=allParentIds,proto3" json:"all_parent_ids,omitempty"`                 // list of all (recursive) IS-A parents for concept
	DirectParentIds      []int64      `protobuf:"varint,6,rep,packed,name=direct_parent_ids,json=directParentIds,proto3" json:"direct_parent_ids,omitempty"`        // list of direct IS-A parents for concept
	ConceptRefsets       []int64      `protobuf:"varint,7,rep,packed,name=concept_refsets,json=conceptRefsets,proto3" json:"concept_refsets,omitempty"`             // refsets to which the concept belong
	DescriptionRefsets   []int64      `protobuf:"varint,8,rep,packed,name=description_refsets,json=descriptionRefsets,proto3" json:"description_refsets,omitempty"` // refsets to which the description belong
}

func (x *ExtendedDescription) Reset() {
	*x = ExtendedDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedDescription) ProtoMessage() {}

func (x *ExtendedDescription) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedDescription.ProtoReflect.Descriptor instead.
func (*ExtendedDescription) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{13}
}

func (x *ExtendedDescription) GetDescription() *Description {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ExtendedDescription) GetConcept() *Concept {
	if x != nil {
		return x.Concept
	}
	return nil
}

func (x *ExtendedDescription) GetPreferredDescription() *Description {
	if x != nil {
		return x.PreferredDescription
	}
	return nil
}

func (x *ExtendedDescription) GetAllParentIds() []int64 {
	if x != nil {
		return x.AllParentIds
	}
	return nil
}

func (x *ExtendedDescription) GetDirectParentIds() []int64 {
	if x != nil {
		return x.DirectParentIds
	}
	return nil
}

func (x *ExtendedDescription) GetConceptRefsets() []int64 {
	if x != nil {
		return x.ConceptRefsets
	}
	return nil
}

func (x *ExtendedDescription) GetDescriptionRefsets() []int64 {
	if x != nil {
		return x.DescriptionRefsets
	}
	return nil
}

// ConceptReference is a simple reference to a concept with an optional preferred description included.
type ConceptReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConceptId int64  `protobuf:"varint,1,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
	Term      string `protobuf:"bytes,2,opt,name=term,proto3" json:"term,omitempty"`
}

func (x *ConceptReference) Reset() {
	*x = ConceptReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptReference) ProtoMessage() {}

func (x *ConceptReference) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptReference.ProtoReflect.Descriptor instead.
func (*ConceptReference) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{14}
}

func (x *ConceptReference) GetConceptId() int64 {
	if x != nil {
		return x.ConceptId
	}
	return 0
}

func (x *ConceptReference) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

// Expression represents a compound SNOMED CT expression.
// There would usually only be a single concept and possibly some refinement
// See https://confluence.ihtsdotools.org/display/DOCSCG/Compositional+Grammar+-+Specification+and+Guide
// The ABNF grammar for SNOMED compositional grammar (CG) is available here:
// https://github.com/IHTSDO/SNOMEDCT-Languages/blob/master/SnomedCTCompositionalGrammar/CG%20Syntax/Compositional%20Grammar%20v2%20-%20ABNF%20(Normative).txt
type Expression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefinitionStatus Expression_DefinitionStatus `protobuf:"varint,1,opt,name=definition_status,json=definitionStatus,proto3,enum=snomed.Expression_DefinitionStatus" json:"definition_status,omitempty"`
	Clause           *Expression_Clause          `protobuf:"bytes,2,opt,name=clause,proto3" json:"clause,omitempty"`
}

func (x *Expression) Reset() {
	*x = Expression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression) ProtoMessage() {}

func (x *Expression) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression.ProtoReflect.Descriptor instead.
func (*Expression) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{15}
}

func (x *Expression) GetDefinitionStatus() Expression_DefinitionStatus {
	if x != nil {
		return x.DefinitionStatus
	}
	return Expression_EQUIVALENT_TO
}

func (x *Expression) GetClause() *Expression_Clause {
	if x != nil {
		return x.Clause
	}
	return nil
}

// SubsumptionRequest requests a test of subsumption
// This is based on on the HL7 FHIR terminology service definition
// Does concept A subsumes concept B?
// e.g. A:Disorder of liver, B: viral hepatitis. Result: Subsumes
// See https://www.hl7.org/fhir/terminology-service.html
type SubsumptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	System string `protobuf:"bytes,1,opt,name=system,proto3" json:"system,omitempty"` // This is ignored, but should be "http://snomed.info/sct"
	CodeA  int64  `protobuf:"varint,2,opt,name=code_a,json=codeA,proto3" json:"code_a,omitempty"`
	CodeB  int64  `protobuf:"varint,3,opt,name=code_b,json=codeB,proto3" json:"code_b,omitempty"`
}

func (x *SubsumptionRequest) Reset() {
	*x = SubsumptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubsumptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubsumptionRequest) ProtoMessage() {}

func (x *SubsumptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubsumptionRequest.ProtoReflect.Descriptor instead.
func (*SubsumptionRequest) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{16}
}

func (x *SubsumptionRequest) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *SubsumptionRequest) GetCodeA() int64 {
	if x != nil {
		return x.CodeA
	}
	return 0
}

func (x *SubsumptionRequest) GetCodeB() int64 {
	if x != nil {
		return x.CodeB
	}
	return 0
}

// SubsumptionResponse gives the response of subsumption testing
type SubsumptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result SubsumptionResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=snomed.SubsumptionResponse_Result" json:"result,omitempty"`
}

func (x *SubsumptionResponse) Reset() {
	*x = SubsumptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubsumptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubsumptionResponse) ProtoMessage() {}

func (x *SubsumptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubsumptionResponse.ProtoReflect.Descriptor instead.
func (*SubsumptionResponse) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{17}
}

func (x *SubsumptionResponse) GetResult() SubsumptionResponse_Result {
	if x != nil {
		return x.Result
	}
	return SubsumptionResponse_EQUIVALENT
}

// RefinementRequest requests the possible refinements
// for the specified concept.
type RefinementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConceptId   int64 `protobuf:"varint,1,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`       // concept to be refined
	ChoiceLimit int32 `protobuf:"varint,2,opt,name=choice_limit,json=choiceLimit,proto3" json:"choice_limit,omitempty"` // include list of choices if the number available is below this count, zero for none.
}

func (x *RefinementRequest) Reset() {
	*x = RefinementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefinementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefinementRequest) ProtoMessage() {}

func (x *RefinementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefinementRequest.ProtoReflect.Descriptor instead.
func (*RefinementRequest) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{18}
}

func (x *RefinementRequest) GetConceptId() int64 {
	if x != nil {
		return x.ConceptId
	}
	return 0
}

func (x *RefinementRequest) GetChoiceLimit() int32 {
	if x != nil {
		return x.ChoiceLimit
	}
	return 0
}

type RefinementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Concept     *Concept                         `protobuf:"bytes,1,opt,name=concept,proto3" json:"concept,omitempty"`
	Refinements []*RefinementResponse_Refinement `protobuf:"bytes,2,rep,name=refinements,proto3" json:"refinements,omitempty"`
}

func (x *RefinementResponse) Reset() {
	*x = RefinementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefinementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefinementResponse) ProtoMessage() {}

func (x *RefinementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefinementResponse.ProtoReflect.Descriptor instead.
func (*RefinementResponse) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{19}
}

func (x *RefinementResponse) GetConcept() *Concept {
	if x != nil {
		return x.Concept
	}
	return nil
}

func (x *RefinementResponse) GetRefinements() []*RefinementResponse_Refinement {
	if x != nil {
		return x.Refinements
	}
	return nil
}

type TranslateFromRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefsetId        int64  `protobuf:"varint,1,opt,name=refset_id,json=refsetId,proto3" json:"refset_id,omitempty"`
	S               string `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`                                                     //
	IncludeInactive bool   `protobuf:"varint,3,opt,name=include_inactive,json=includeInactive,proto3" json:"include_inactive,omitempty"` // include inactive results in the translations?
}

func (x *TranslateFromRequest) Reset() {
	*x = TranslateFromRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranslateFromRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslateFromRequest) ProtoMessage() {}

func (x *TranslateFromRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslateFromRequest.ProtoReflect.Descriptor instead.
func (*TranslateFromRequest) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{20}
}

func (x *TranslateFromRequest) GetRefsetId() int64 {
	if x != nil {
		return x.RefsetId
	}
	return 0
}

func (x *TranslateFromRequest) GetS() string {
	if x != nil {
		return x.S
	}
	return ""
}

func (x *TranslateFromRequest) GetIncludeInactive() bool {
	if x != nil {
		return x.IncludeInactive
	}
	return false
}

type TranslateFromResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Translations []*TranslateFromResponse_Item `protobuf:"bytes,1,rep,name=translations,proto3" json:"translations,omitempty"` // sorted by group and priority
}

func (x *TranslateFromResponse) Reset() {
	*x = TranslateFromResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranslateFromResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslateFromResponse) ProtoMessage() {}

func (x *TranslateFromResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslateFromResponse.ProtoReflect.Descriptor instead.
func (*TranslateFromResponse) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{21}
}

func (x *TranslateFromResponse) GetTranslations() []*TranslateFromResponse_Item {
	if x != nil {
		return x.Translations
	}
	return nil
}

type CrossMapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConceptId int64 `protobuf:"varint,1,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`
	RefsetId  int64 `protobuf:"varint,2,opt,name=refset_id,json=refsetId,proto3" json:"refset_id,omitempty"`
}

func (x *CrossMapRequest) Reset() {
	*x = CrossMapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossMapRequest) ProtoMessage() {}

func (x *CrossMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossMapRequest.ProtoReflect.Descriptor instead.
func (*CrossMapRequest) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{22}
}

func (x *CrossMapRequest) GetConceptId() int64 {
	if x != nil {
		return x.ConceptId
	}
	return 0
}

func (x *CrossMapRequest) GetRefsetId() int64 {
	if x != nil {
		return x.RefsetId
	}
	return 0
}

type MapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConceptId int64              `protobuf:"varint,1,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`           // source concept identifier
	RefsetId  int64              `protobuf:"varint,2,opt,name=refset_id,json=refsetId,proto3" json:"refset_id,omitempty"`              // target reference set.
	TargetId  []int64            `protobuf:"varint,3,rep,packed,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`       // a list of target concepts to which to map
	Parents   MapRequest_Parents `protobuf:"varint,4,opt,name=parents,proto3,enum=snomed.MapRequest_Parents" json:"parents,omitempty"` // whether to map to parents of the target set, if not found in the target set directly
}

func (x *MapRequest) Reset() {
	*x = MapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapRequest) ProtoMessage() {}

func (x *MapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapRequest.ProtoReflect.Descriptor instead.
func (*MapRequest) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{23}
}

func (x *MapRequest) GetConceptId() int64 {
	if x != nil {
		return x.ConceptId
	}
	return 0
}

func (x *MapRequest) GetRefsetId() int64 {
	if x != nil {
		return x.RefsetId
	}
	return 0
}

func (x *MapRequest) GetTargetId() []int64 {
	if x != nil {
		return x.TargetId
	}
	return nil
}

func (x *MapRequest) GetParents() MapRequest_Parents {
	if x != nil {
		return x.Parents
	}
	return MapRequest_FALLBACK
}

type MapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Translations []*ConceptReference `protobuf:"bytes,1,rep,name=translations,proto3" json:"translations,omitempty"` // list of translations, sorted in scored order (best first)
}

func (x *MapResponse) Reset() {
	*x = MapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapResponse) ProtoMessage() {}

func (x *MapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapResponse.ProtoReflect.Descriptor instead.
func (*MapResponse) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{24}
}

func (x *MapResponse) GetTranslations() []*ConceptReference {
	if x != nil {
		return x.Translations
	}
	return nil
}

type ParseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S string `protobuf:"bytes,1,opt,name=s,proto3" json:"s,omitempty"` // string to parse
}

func (x *ParseRequest) Reset() {
	*x = ParseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseRequest) ProtoMessage() {}

func (x *ParseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseRequest.ProtoReflect.Descriptor instead.
func (*ParseRequest) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{25}
}

func (x *ParseRequest) GetS() string {
	if x != nil {
		return x.S
	}
	return ""
}

// ExtractRequest requests natural language processing entity matching for the specified
// free-text. Requests can include a range of hints specifying specialty and other
// contextual clues, to aid matching.
type ExtractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S     string  `protobuf:"bytes,1,opt,name=s,proto3" json:"s,omitempty"`                 // string to parse
	Hints []int64 `protobuf:"varint,2,rep,packed,name=hints,proto3" json:"hints,omitempty"` // contextual hints, list of concept identifiers
}

func (x *ExtractRequest) Reset() {
	*x = ExtractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractRequest) ProtoMessage() {}

func (x *ExtractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractRequest.ProtoReflect.Descriptor instead.
func (*ExtractRequest) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{26}
}

func (x *ExtractRequest) GetS() string {
	if x != nil {
		return x.S
	}
	return ""
}

func (x *ExtractRequest) GetHints() []int64 {
	if x != nil {
		return x.Hints
	}
	return nil
}

// ExtractResponse provides a list of entities from the unstructured text.
// As an individual entity may correspond to multiple concepts (imagine "diabetes" might
// map to diabetes mellitus, diabetes insipidus etc.), we return multiple concepts
// sorted in order of "best" match, as well as the best match if, algorithmically, we
// are confident of a best match, and a generic match, a generic concept that subsumes
// the matches found. The latter is most useful when trying to make sense, safely,
// during non-interactive use. This service will also return complete SNOMED CT expressions
// in the future.
type ExtractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entities []*ExtractResponse_Entity `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ExtractResponse) Reset() {
	*x = ExtractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractResponse) ProtoMessage() {}

func (x *ExtractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractResponse.ProtoReflect.Descriptor instead.
func (*ExtractResponse) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{27}
}

func (x *ExtractResponse) GetEntities() []*ExtractResponse_Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

// SearchRequest performs a free-text search of the hierarchy.
type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S                  string              `protobuf:"bytes,1,opt,name=s,proto3" json:"s,omitempty"`                                                                     // the search string, mandatory
	IsA                []int64             `protobuf:"varint,2,rep,packed,name=is_a,json=isA,proto3" json:"is_a,omitempty"`                                              // limit search to descendents of these parents, default:root
	DirectParents      []int64             `protobuf:"varint,3,rep,packed,name=direct_parents,json=directParents,proto3" json:"direct_parents,omitempty"`                // limit search to direct descendents of these parents, default:none
	ConceptRefsets     []int64             `protobuf:"varint,4,rep,packed,name=concept_refsets,json=conceptRefsets,proto3" json:"concept_refsets,omitempty"`             // limit search to concepts in the specified reference sets, default: none
	DescriptionRefsets []int64             `protobuf:"varint,5,rep,packed,name=description_refsets,json=descriptionRefsets,proto3" json:"description_refsets,omitempty"` // limit search to descriptions in the specified reference sets, default: none
	MaximumHits        int32               `protobuf:"varint,6,opt,name=maximum_hits,json=maximumHits,proto3" json:"maximum_hits,omitempty"`                             // limit for maximum hits, use default if zero
	IncludeInactive    bool                `protobuf:"varint,7,opt,name=include_inactive,json=includeInactive,proto3" json:"include_inactive,omitempty"`                 // search descriptions for inactive concepts, default false
	Fuzzy              SearchRequest_Fuzzy `protobuf:"varint,8,opt,name=fuzzy,proto3,enum=snomed.SearchRequest_Fuzzy" json:"fuzzy,omitempty"`                            // fuzziness preference, default fallback fuzzy
	Hints              []int64             `protobuf:"varint,9,rep,packed,name=hints,proto3" json:"hints,omitempty"`                                                     // hints to help search (e.g. context like specialty, location, etc), list of concept identifiers
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{28}
}

func (x *SearchRequest) GetS() string {
	if x != nil {
		return x.S
	}
	return ""
}

func (x *SearchRequest) GetIsA() []int64 {
	if x != nil {
		return x.IsA
	}
	return nil
}

func (x *SearchRequest) GetDirectParents() []int64 {
	if x != nil {
		return x.DirectParents
	}
	return nil
}

func (x *SearchRequest) GetConceptRefsets() []int64 {
	if x != nil {
		return x.ConceptRefsets
	}
	return nil
}

func (x *SearchRequest) GetDescriptionRefsets() []int64 {
	if x != nil {
		return x.DescriptionRefsets
	}
	return nil
}

func (x *SearchRequest) GetMaximumHits() int32 {
	if x != nil {
		return x.MaximumHits
	}
	return 0
}

func (x *SearchRequest) GetIncludeInactive() bool {
	if x != nil {
		return x.IncludeInactive
	}
	return false
}

func (x *SearchRequest) GetFuzzy() SearchRequest_Fuzzy {
	if x != nil {
		return x.Fuzzy
	}
	return SearchRequest_FALLBACK_FUZZY
}

func (x *SearchRequest) GetHints() []int64 {
	if x != nil {
		return x.Hints
	}
	return nil
}

// SearchResponse provides an optimised search response, sufficient for display purposes.
type SearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*SearchResponse_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{29}
}

func (x *SearchResponse) GetItems() []*SearchResponse_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

// SearchFeedback provides feedback on a search.
type SearchFeedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request         *SearchRequest  `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`                                         // the original search request
	Response        *SearchResponse `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`                                       // the search response
	SelectedConcept int64           `protobuf:"varint,3,opt,name=selected_concept,json=selectedConcept,proto3" json:"selected_concept,omitempty"` // what was finally chosen by the user
}

func (x *SearchFeedback) Reset() {
	*x = SearchFeedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchFeedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchFeedback) ProtoMessage() {}

func (x *SearchFeedback) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchFeedback.ProtoReflect.Descriptor instead.
func (*SearchFeedback) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{30}
}

func (x *SearchFeedback) GetRequest() *SearchRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *SearchFeedback) GetResponse() *SearchResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *SearchFeedback) GetSelectedConcept() int64 {
	if x != nil {
		return x.SelectedConcept
	}
	return 0
}

type SynonymRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S               string              `protobuf:"bytes,1,opt,name=s,proto3" json:"s,omitempty"`                                                     // search string
	IsA             []int64             `protobuf:"varint,2,rep,packed,name=is_a,json=isA,proto3" json:"is_a,omitempty"`                              // limit search to descendents of these parents, default:root
	MaximumHits     int32               `protobuf:"varint,3,opt,name=maximum_hits,json=maximumHits,proto3" json:"maximum_hits,omitempty"`             // limit for maximum hits, use default if zero
	IncludeInactive bool                `protobuf:"varint,4,opt,name=include_inactive,json=includeInactive,proto3" json:"include_inactive,omitempty"` // search descriptions for inactive concepts, default false
	Fuzzy           SearchRequest_Fuzzy `protobuf:"varint,5,opt,name=fuzzy,proto3,enum=snomed.SearchRequest_Fuzzy" json:"fuzzy,omitempty"`            // fuzziness preference, default fallback fuzzy
	IncludeChildren bool                `protobuf:"varint,6,opt,name=include_children,json=includeChildren,proto3" json:"include_children,omitempty"` // whether to include children of identified concepts
}

func (x *SynonymRequest) Reset() {
	*x = SynonymRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynonymRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynonymRequest) ProtoMessage() {}

func (x *SynonymRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynonymRequest.ProtoReflect.Descriptor instead.
func (*SynonymRequest) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{31}
}

func (x *SynonymRequest) GetS() string {
	if x != nil {
		return x.S
	}
	return ""
}

func (x *SynonymRequest) GetIsA() []int64 {
	if x != nil {
		return x.IsA
	}
	return nil
}

func (x *SynonymRequest) GetMaximumHits() int32 {
	if x != nil {
		return x.MaximumHits
	}
	return 0
}

func (x *SynonymRequest) GetIncludeInactive() bool {
	if x != nil {
		return x.IncludeInactive
	}
	return false
}

func (x *SynonymRequest) GetFuzzy() SearchRequest_Fuzzy {
	if x != nil {
		return x.Fuzzy
	}
	return SearchRequest_FALLBACK_FUZZY
}

func (x *SynonymRequest) GetIncludeChildren() bool {
	if x != nil {
		return x.IncludeChildren
	}
	return false
}

type SynonymResponseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S string `protobuf:"bytes,1,opt,name=s,proto3" json:"s,omitempty"` // a synonym
}

func (x *SynonymResponseItem) Reset() {
	*x = SynonymResponseItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynonymResponseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynonymResponseItem) ProtoMessage() {}

func (x *SynonymResponseItem) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynonymResponseItem.ProtoReflect.Descriptor instead.
func (*SynonymResponseItem) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{32}
}

func (x *SynonymResponseItem) GetS() string {
	if x != nil {
		return x.S
	}
	return ""
}

// A clause is a "subexpression" in the CG grammar, with refinements either flat
// or nested in groups
type Expression_Clause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FocusConcepts    []*ConceptReference           `protobuf:"bytes,1,rep,name=focus_concepts,json=focusConcepts,proto3" json:"focus_concepts,omitempty"` // should all be from same hierarchy
	Refinements      []*Expression_Refinement      `protobuf:"bytes,2,rep,name=refinements,proto3" json:"refinements,omitempty"`
	RefinementGroups []*Expression_RefinementGroup `protobuf:"bytes,3,rep,name=refinement_groups,json=refinementGroups,proto3" json:"refinement_groups,omitempty"`
}

func (x *Expression_Clause) Reset() {
	*x = Expression_Clause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_Clause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_Clause) ProtoMessage() {}

func (x *Expression_Clause) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_Clause.ProtoReflect.Descriptor instead.
func (*Expression_Clause) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{15, 0}
}

func (x *Expression_Clause) GetFocusConcepts() []*ConceptReference {
	if x != nil {
		return x.FocusConcepts
	}
	return nil
}

func (x *Expression_Clause) GetRefinements() []*Expression_Refinement {
	if x != nil {
		return x.Refinements
	}
	return nil
}

func (x *Expression_Clause) GetRefinementGroups() []*Expression_RefinementGroup {
	if x != nil {
		return x.RefinementGroups
	}
	return nil
}

type Expression_RefinementGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Refinements []*Expression_Refinement `protobuf:"bytes,1,rep,name=refinements,proto3" json:"refinements,omitempty"`
}

func (x *Expression_RefinementGroup) Reset() {
	*x = Expression_RefinementGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_RefinementGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_RefinementGroup) ProtoMessage() {}

func (x *Expression_RefinementGroup) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_RefinementGroup.ProtoReflect.Descriptor instead.
func (*Expression_RefinementGroup) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{15, 1}
}

func (x *Expression_RefinementGroup) GetRefinements() []*Expression_Refinement {
	if x != nil {
		return x.Refinements
	}
	return nil
}

// Refinement is a name/value pair (an attribute) permitting refinement of the focus concept(s)
// The value can be a concept, a clause, or a concrete value such as a string, integer or double
type Expression_Refinement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefinementConcept *ConceptReference `protobuf:"bytes,1,opt,name=refinement_concept,json=refinementConcept,proto3" json:"refinement_concept,omitempty"` // the "attribute name", must be child of 246061005 (Attribute)
	// Types that are assignable to Value:
	//	*Expression_Refinement_ConceptValue
	//	*Expression_Refinement_ClauseValue
	//	*Expression_Refinement_StringValue
	//	*Expression_Refinement_IntValue
	//	*Expression_Refinement_DoubleValue
	Value isExpression_Refinement_Value `protobuf_oneof:"value"`
}

func (x *Expression_Refinement) Reset() {
	*x = Expression_Refinement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_Refinement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_Refinement) ProtoMessage() {}

func (x *Expression_Refinement) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_Refinement.ProtoReflect.Descriptor instead.
func (*Expression_Refinement) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{15, 2}
}

func (x *Expression_Refinement) GetRefinementConcept() *ConceptReference {
	if x != nil {
		return x.RefinementConcept
	}
	return nil
}

func (m *Expression_Refinement) GetValue() isExpression_Refinement_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Expression_Refinement) GetConceptValue() *ConceptReference {
	if x, ok := x.GetValue().(*Expression_Refinement_ConceptValue); ok {
		return x.ConceptValue
	}
	return nil
}

func (x *Expression_Refinement) GetClauseValue() *Expression_Clause {
	if x, ok := x.GetValue().(*Expression_Refinement_ClauseValue); ok {
		return x.ClauseValue
	}
	return nil
}

func (x *Expression_Refinement) GetStringValue() string {
	if x, ok := x.GetValue().(*Expression_Refinement_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Expression_Refinement) GetIntValue() int64 {
	if x, ok := x.GetValue().(*Expression_Refinement_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *Expression_Refinement) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*Expression_Refinement_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

type isExpression_Refinement_Value interface {
	isExpression_Refinement_Value()
}

type Expression_Refinement_ConceptValue struct {
	ConceptValue *ConceptReference `protobuf:"bytes,2,opt,name=concept_value,json=conceptValue,proto3,oneof"`
}

type Expression_Refinement_ClauseValue struct {
	ClauseValue *Expression_Clause `protobuf:"bytes,3,opt,name=clause_value,json=clauseValue,proto3,oneof"` // a subexpression
}

type Expression_Refinement_StringValue struct {
	StringValue string `protobuf:"bytes,4,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Expression_Refinement_IntValue struct {
	IntValue int64 `protobuf:"varint,5,opt,name=int_value,json=intValue,proto3,oneof"`
}

type Expression_Refinement_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,6,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

func (*Expression_Refinement_ConceptValue) isExpression_Refinement_Value() {}

func (*Expression_Refinement_ClauseValue) isExpression_Refinement_Value() {}

func (*Expression_Refinement_StringValue) isExpression_Refinement_Value() {}

func (*Expression_Refinement_IntValue) isExpression_Refinement_Value() {}

func (*Expression_Refinement_DoubleValue) isExpression_Refinement_Value() {}

type RefinementResponse_Refinement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attribute *ConceptReference   `protobuf:"bytes,1,opt,name=attribute,proto3" json:"attribute,omitempty"`                  // the type of refinement, eg. laterality
	RootValue *ConceptReference   `protobuf:"bytes,2,opt,name=root_value,json=rootValue,proto3" json:"root_value,omitempty"` // the parent in the IS-A hierarchy that define value set
	Choices   []*ConceptReference `protobuf:"bytes,3,rep,name=choices,proto3" json:"choices,omitempty"`                      // the actual value set (a list of choices) for the refinement
}

func (x *RefinementResponse_Refinement) Reset() {
	*x = RefinementResponse_Refinement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefinementResponse_Refinement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefinementResponse_Refinement) ProtoMessage() {}

func (x *RefinementResponse_Refinement) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefinementResponse_Refinement.ProtoReflect.Descriptor instead.
func (*RefinementResponse_Refinement) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{19, 0}
}

func (x *RefinementResponse_Refinement) GetAttribute() *ConceptReference {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *RefinementResponse_Refinement) GetRootValue() *ConceptReference {
	if x != nil {
		return x.RootValue
	}
	return nil
}

func (x *RefinementResponse_Refinement) GetChoices() []*ConceptReference {
	if x != nil {
		return x.Choices
	}
	return nil
}

type TranslateFromResponse_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferenceSetItem     *ReferenceSetItem `protobuf:"bytes,1,opt,name=reference_set_item,json=referenceSetItem,proto3" json:"reference_set_item,omitempty"`
	Concept              *Concept          `protobuf:"bytes,2,opt,name=concept,proto3" json:"concept,omitempty"`
	SameAs               []int64           `protobuf:"varint,3,rep,packed,name=same_as,json=sameAs,proto3" json:"same_as,omitempty"`                                             // a list of other concepts that this target is the SAME_AS
	PossiblyEquivalentTo []int64           `protobuf:"varint,4,rep,packed,name=possibly_equivalent_to,json=possiblyEquivalentTo,proto3" json:"possibly_equivalent_to,omitempty"` // a list of other concepts that this target is possibly equivalent to
	SimilarTo            []int64           `protobuf:"varint,5,rep,packed,name=similar_to,json=similarTo,proto3" json:"similar_to,omitempty"`                                    // a list of other concepts that this target is SIMILAR_TO
	ReplacedBy           []int64           `protobuf:"varint,6,rep,packed,name=replaced_by,json=replacedBy,proto3" json:"replaced_by,omitempty"`                                 // a list of other concepts that this target has been REPLACED_BY
}

func (x *TranslateFromResponse_Item) Reset() {
	*x = TranslateFromResponse_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranslateFromResponse_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslateFromResponse_Item) ProtoMessage() {}

func (x *TranslateFromResponse_Item) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslateFromResponse_Item.ProtoReflect.Descriptor instead.
func (*TranslateFromResponse_Item) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{21, 0}
}

func (x *TranslateFromResponse_Item) GetReferenceSetItem() *ReferenceSetItem {
	if x != nil {
		return x.ReferenceSetItem
	}
	return nil
}

func (x *TranslateFromResponse_Item) GetConcept() *Concept {
	if x != nil {
		return x.Concept
	}
	return nil
}

func (x *TranslateFromResponse_Item) GetSameAs() []int64 {
	if x != nil {
		return x.SameAs
	}
	return nil
}

func (x *TranslateFromResponse_Item) GetPossiblyEquivalentTo() []int64 {
	if x != nil {
		return x.PossiblyEquivalentTo
	}
	return nil
}

func (x *TranslateFromResponse_Item) GetSimilarTo() []int64 {
	if x != nil {
		return x.SimilarTo
	}
	return nil
}

func (x *TranslateFromResponse_Item) GetReplacedBy() []int64 {
	if x != nil {
		return x.ReplacedBy
	}
	return nil
}

type ExtractResponse_Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text         string              `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`                                      // text
	Score        float64             `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`                                  // confidence score
	Negated      bool                `protobuf:"varint,3,opt,name=negated,proto3" json:"negated,omitempty"`                               // is this negated?
	Concepts     []*ConceptReference `protobuf:"bytes,4,rep,name=concepts,proto3" json:"concepts,omitempty"`                              // possible matching concepts
	Expressions  []string            `protobuf:"bytes,5,rep,name=expressions,proto3" json:"expressions,omitempty"`                        // possible matching SNOMED CT expressions
	BestMatch    int64               `protobuf:"varint,6,opt,name=best_match,json=bestMatch,proto3" json:"best_match,omitempty"`          // the best match, algorithmically, if found
	GenericMatch int64               `protobuf:"varint,7,opt,name=generic_match,json=genericMatch,proto3" json:"generic_match,omitempty"` // the generic match for all matching concepts
}

func (x *ExtractResponse_Entity) Reset() {
	*x = ExtractResponse_Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractResponse_Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractResponse_Entity) ProtoMessage() {}

func (x *ExtractResponse_Entity) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractResponse_Entity.ProtoReflect.Descriptor instead.
func (*ExtractResponse_Entity) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{27, 0}
}

func (x *ExtractResponse_Entity) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ExtractResponse_Entity) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ExtractResponse_Entity) GetNegated() bool {
	if x != nil {
		return x.Negated
	}
	return false
}

func (x *ExtractResponse_Entity) GetConcepts() []*ConceptReference {
	if x != nil {
		return x.Concepts
	}
	return nil
}

func (x *ExtractResponse_Entity) GetExpressions() []string {
	if x != nil {
		return x.Expressions
	}
	return nil
}

func (x *ExtractResponse_Entity) GetBestMatch() int64 {
	if x != nil {
		return x.BestMatch
	}
	return 0
}

func (x *ExtractResponse_Entity) GetGenericMatch() int64 {
	if x != nil {
		return x.GenericMatch
	}
	return 0
}

type SearchResponse_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DescriptionId int64  `protobuf:"varint,1,opt,name=description_id,json=descriptionId,proto3" json:"description_id,omitempty"` // term identifier
	Term          string `protobuf:"bytes,2,opt,name=term,proto3" json:"term,omitempty"`                                         // matched term
	ConceptId     int64  `protobuf:"varint,3,opt,name=concept_id,json=conceptId,proto3" json:"concept_id,omitempty"`             // concept identifier
	PreferredTerm string `protobuf:"bytes,4,opt,name=preferred_term,json=preferredTerm,proto3" json:"preferred_term,omitempty"`  // cached preferred term for this concept
}

func (x *SearchResponse_Item) Reset() {
	*x = SearchResponse_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snomed_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse_Item) ProtoMessage() {}

func (x *SearchResponse_Item) ProtoReflect() protoreflect.Message {
	mi := &file_snomed_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse_Item.ProtoReflect.Descriptor instead.
func (*SearchResponse_Item) Descriptor() ([]byte, []int) {
	return file_snomed_proto_rawDescGZIP(), []int{29, 0}
}

func (x *SearchResponse_Item) GetDescriptionId() int64 {
	if x != nil {
		return x.DescriptionId
	}
	return 0
}

func (x *SearchResponse_Item) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *SearchResponse_Item) GetConceptId() int64 {
	if x != nil {
		return x.ConceptId
	}
	return 0
}

func (x *SearchResponse_Item) GetPreferredTerm() string {
	if x != nil {
		return x.PreferredTerm
	}
	return ""
}

var File_snomed_proto protoreflect.FileDescriptor

var file_snomed_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc3, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x22, 0xb3, 0x02,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a,
	0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x63, 0x61, 0x73, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0xf9, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xd5, 0x05, 0x0a, 0x10, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x72, 0x65, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x53, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73,
	0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x66, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x66, 0x73, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73,
	0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x4d, 0x61,
	0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x12, 0x4d, 0x0a, 0x0f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xad, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x66, 0x53,
	0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x14, 0x0a, 0x12, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x22, 0x41, 0x0a,
	0x14, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x53, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x22, 0x36, 0x0a, 0x15, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x70,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x61, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x93, 0x02, 0x0a, 0x16, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x53, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x41, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x61, 0x70, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x37,
	0x0a, 0x1a, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x17, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0xf6, 0x02, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64,
	0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65,
	0x64, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0d,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x48, 0x0a,
	0x15, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x14, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x5f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0c, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x66, 0x73, 0x65,
	0x74, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65,
	0x64, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb9, 0x02, 0x0a, 0x13,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x48,
	0x0a, 0x15, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x14, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x14, 0x66, 0x75, 0x6c, 0x6c,
	0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x66, 0x75, 0x6c,
	0x6c, 0x79, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2f, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73,
	0x12, 0x35, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf3, 0x02, 0x0a, 0x13, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x35, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64,
	0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x12, 0x48, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x61,
	0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x65, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x12, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x66, 0x73, 0x65, 0x74, 0x73, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x45, 0x0a,
	0x10, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x72, 0x6d, 0x22, 0xc5, 0x06, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x10, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x52, 0x06, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x1a, 0xdb, 0x01, 0x0a, 0x06, 0x43, 0x6c, 0x61,
	0x75, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e,
	0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6e, 0x6f, 0x6d,
	0x65, 0x64, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x10, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0x52, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x72,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0xc8, 0x02, 0x0a, 0x0a, 0x52,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x12, 0x72, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x11, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x6f, 0x6d,
	0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x6f, 0x6d,
	0x65, 0x64, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52,
	0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x35, 0x0a, 0x10, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x51, 0x55,
	0x49, 0x56, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x46, 0x10, 0x01, 0x22, 0x5a, 0x0a, 0x12,
	0x53, 0x75, 0x62, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65,
	0x41, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x22, 0x9c, 0x01, 0x0a, 0x13, 0x53, 0x75, 0x62,
	0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x75, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x49, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x51, 0x55, 0x49, 0x56, 0x41,
	0x4c, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x55, 0x42, 0x53, 0x55, 0x4d,
	0x45, 0x53, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x55, 0x42, 0x53, 0x55, 0x4d, 0x45, 0x44,
	0x5f, 0x42, 0x59, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x42,
	0x53, 0x55, 0x4d, 0x45, 0x44, 0x10, 0x03, 0x22, 0x55, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xbc,
	0x02, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x12, 0x47, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x52,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x72, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0xb1, 0x01, 0x0a, 0x0a, 0x52, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e,
	0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x37, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09,
	0x72, 0x6f, 0x6f, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x6f,
	0x6d, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x22, 0x6c, 0x0a,
	0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x66, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xea, 0x02, 0x0a, 0x15,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6e,
	0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x88, 0x02,
	0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x46, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x10, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x29,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x61, 0x6d,
	0x65, 0x5f, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x73, 0x61, 0x6d, 0x65,
	0x41, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x79, 0x5f, 0x65,
	0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x14, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x79, 0x45, 0x71, 0x75, 0x69,
	0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x6d, 0x69,
	0x6c, 0x61, 0x72, 0x5f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69,
	0x6d, 0x69, 0x6c, 0x61, 0x72, 0x54, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x42, 0x79, 0x22, 0x4d, 0x0a, 0x0f, 0x43, 0x72, 0x6f, 0x73,
	0x73, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x66, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72,
	0x65, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x0a, 0x4d, 0x61, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x66, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x07, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x2e, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x0c, 0x0a, 0x08, 0x46, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x45,
	0x56, 0x45, 0x52, 0x10, 0x02, 0x22, 0x4b, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x6f,
	0x6d, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x1c, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x73,
	0x22, 0x34, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x05, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xb8, 0x02, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73,
	0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0xe8, 0x01, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64,
	0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x23, 0x0a, 0x0d,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x22, 0x85, 0x03, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01,
	0x73, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x73, 0x5f, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x03, 0x69, 0x73, 0x41, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x66,
	0x73, 0x65, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x12, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x68, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x48, 0x69, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x52,
	0x05, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x3b, 0x0a, 0x05,
	0x46, 0x75, 0x7a, 0x7a, 0x79, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43,
	0x4b, 0x5f, 0x46, 0x55, 0x5a, 0x5a, 0x59, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4c, 0x57,
	0x41, 0x59, 0x53, 0x5f, 0x46, 0x55, 0x5a, 0x5a, 0x59, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4e,
	0x4f, 0x5f, 0x46, 0x55, 0x5a, 0x5a, 0x59, 0x10, 0x02, 0x22, 0xcd, 0x01, 0x0a, 0x0e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6e,
	0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a,
	0x87, 0x01, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x72, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x22, 0xa0, 0x01, 0x0a, 0x0e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x2f, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x22, 0xdd, 0x01, 0x0a,
	0x0e, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0c, 0x0a, 0x01, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x73, 0x12, 0x11, 0x0a,
	0x04, 0x69, 0x73, 0x5f, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x73, 0x41,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x68, 0x69, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x48,
	0x69, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x31,
	0x0a, 0x05, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x52, 0x05, 0x66, 0x75, 0x7a, 0x7a,
	0x79, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x23, 0x0a, 0x13,
	0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01,
	0x73, 0x42, 0x35, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x64, 0x72, 0x69, 0x78, 0x2e,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x73, 0x6e, 0x6f, 0x6d,
	0x65, 0x64, 0x63, 0x74, 0x42, 0x06, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x50, 0x01, 0x5a, 0x08,
	0x2e, 0x3b, 0x73, 0x6e, 0x6f, 0x6d, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_snomed_proto_rawDescOnce sync.Once
	file_snomed_proto_rawDescData = file_snomed_proto_rawDesc
)

func file_snomed_proto_rawDescGZIP() []byte {
	file_snomed_proto_rawDescOnce.Do(func() {
		file_snomed_proto_rawDescData = protoimpl.X.CompressGZIP(file_snomed_proto_rawDescData)
	})
	return file_snomed_proto_rawDescData
}

var file_snomed_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_snomed_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_snomed_proto_goTypes = []interface{}{
	(Expression_DefinitionStatus)(0),      // 0: snomed.Expression.DefinitionStatus
	(SubsumptionResponse_Result)(0),       // 1: snomed.SubsumptionResponse.Result
	(MapRequest_Parents)(0),               // 2: snomed.MapRequest.Parents
	(SearchRequest_Fuzzy)(0),              // 3: snomed.SearchRequest.Fuzzy
	(*Concept)(nil),                       // 4: snomed.Concept
	(*Description)(nil),                   // 5: snomed.Description
	(*Relationship)(nil),                  // 6: snomed.Relationship
	(*ReferenceSetItem)(nil),              // 7: snomed.ReferenceSetItem
	(*RefSetDescriptorReferenceSet)(nil),  // 8: snomed.RefSetDescriptorReferenceSet
	(*SimpleReferenceSet)(nil),            // 9: snomed.SimpleReferenceSet
	(*LanguageReferenceSet)(nil),          // 10: snomed.LanguageReferenceSet
	(*SimpleMapReferenceSet)(nil),         // 11: snomed.SimpleMapReferenceSet
	(*ComplexMapReferenceSet)(nil),        // 12: snomed.ComplexMapReferenceSet
	(*AttributeValueReferenceSet)(nil),    // 13: snomed.AttributeValueReferenceSet
	(*AssociationReferenceSet)(nil),       // 14: snomed.AssociationReferenceSet
	(*ExtendedConcept)(nil),               // 15: snomed.ExtendedConcept
	(*ConceptDescriptions)(nil),           // 16: snomed.ConceptDescriptions
	(*ExtendedDescription)(nil),           // 17: snomed.ExtendedDescription
	(*ConceptReference)(nil),              // 18: snomed.ConceptReference
	(*Expression)(nil),                    // 19: snomed.Expression
	(*SubsumptionRequest)(nil),            // 20: snomed.SubsumptionRequest
	(*SubsumptionResponse)(nil),           // 21: snomed.SubsumptionResponse
	(*RefinementRequest)(nil),             // 22: snomed.RefinementRequest
	(*RefinementResponse)(nil),            // 23: snomed.RefinementResponse
	(*TranslateFromRequest)(nil),          // 24: snomed.TranslateFromRequest
	(*TranslateFromResponse)(nil),         // 25: snomed.TranslateFromResponse
	(*CrossMapRequest)(nil),               // 26: snomed.CrossMapRequest
	(*MapRequest)(nil),                    // 27: snomed.MapRequest
	(*MapResponse)(nil),                   // 28: snomed.MapResponse
	(*ParseRequest)(nil),                  // 29: snomed.ParseRequest
	(*ExtractRequest)(nil),                // 30: snomed.ExtractRequest
	(*ExtractResponse)(nil),               // 31: snomed.ExtractResponse
	(*SearchRequest)(nil),                 // 32: snomed.SearchRequest
	(*SearchResponse)(nil),                // 33: snomed.SearchResponse
	(*SearchFeedback)(nil),                // 34: snomed.SearchFeedback
	(*SynonymRequest)(nil),                // 35: snomed.SynonymRequest
	(*SynonymResponseItem)(nil),           // 36: snomed.SynonymResponseItem
	(*Expression_Clause)(nil),             // 37: snomed.Expression.Clause
	(*Expression_RefinementGroup)(nil),    // 38: snomed.Expression.RefinementGroup
	(*Expression_Refinement)(nil),         // 39: snomed.Expression.Refinement
	(*RefinementResponse_Refinement)(nil), // 40: snomed.RefinementResponse.Refinement
	(*TranslateFromResponse_Item)(nil),    // 41: snomed.TranslateFromResponse.Item
	(*ExtractResponse_Entity)(nil),        // 42: snomed.ExtractResponse.Entity
	(*SearchResponse_Item)(nil),           // 43: snomed.SearchResponse.Item
	(*timestamp.Timestamp)(nil),           // 44: google.protobuf.Timestamp
}
var file_snomed_proto_depIdxs = []int32{
	44, // 0: snomed.Concept.effective_time:type_name -> google.protobuf.Timestamp
	44, // 1: snomed.Description.effective_time:type_name -> google.protobuf.Timestamp
	44, // 2: snomed.Relationship.effective_time:type_name -> google.protobuf.Timestamp
	44, // 3: snomed.ReferenceSetItem.effective_time:type_name -> google.protobuf.Timestamp
	8,  // 4: snomed.ReferenceSetItem.refset_descriptor:type_name -> snomed.RefSetDescriptorReferenceSet
	9,  // 5: snomed.ReferenceSetItem.simple:type_name -> snomed.SimpleReferenceSet
	10, // 6: snomed.ReferenceSetItem.language:type_name -> snomed.LanguageReferenceSet
	11, // 7: snomed.ReferenceSetItem.simple_map:type_name -> snomed.SimpleMapReferenceSet
	12, // 8: snomed.ReferenceSetItem.complex_map:type_name -> snomed.ComplexMapReferenceSet
	13, // 9: snomed.ReferenceSetItem.attribute_value:type_name -> snomed.AttributeValueReferenceSet
	14, // 10: snomed.ReferenceSetItem.association:type_name -> snomed.AssociationReferenceSet
	4,  // 11: snomed.ExtendedConcept.concept:type_name -> snomed.Concept
	6,  // 12: snomed.ExtendedConcept.relationships:type_name -> snomed.Relationship
	5,  // 13: snomed.ExtendedConcept.preferred_description:type_name -> snomed.Description
	5,  // 14: snomed.ExtendedConcept.descriptions:type_name -> snomed.Description
	4,  // 15: snomed.ConceptDescriptions.concept:type_name -> snomed.Concept
	5,  // 16: snomed.ConceptDescriptions.preferred_description:type_name -> snomed.Description
	5,  // 17: snomed.ConceptDescriptions.fully_specified_name:type_name -> snomed.Description
	5,  // 18: snomed.ConceptDescriptions.synonyms:type_name -> snomed.Description
	5,  // 19: snomed.ConceptDescriptions.definitions:type_name -> snomed.Description
	5,  // 20: snomed.ExtendedDescription.description:type_name -> snomed.Description
	4,  // 21: snomed.ExtendedDescription.concept:type_name -> snomed.Concept
	5,  // 22: snomed.ExtendedDescription.preferred_description:type_name -> snomed.Description
	0,  // 23: snomed.Expression.definition_status:type_name -> snomed.Expression.DefinitionStatus
	37, // 24: snomed.Expression.clause:type_name -> snomed.Expression.Clause
	1,  // 25: snomed.SubsumptionResponse.result:type_name -> snomed.SubsumptionResponse.Result
	4,  // 26: snomed.RefinementResponse.concept:type_name -> snomed.Concept
	40, // 27: snomed.RefinementResponse.refinements:type_name -> snomed.RefinementResponse.Refinement
	41, // 28: snomed.TranslateFromResponse.translations:type_name -> snomed.TranslateFromResponse.Item
	2,  // 29: snomed.MapRequest.parents:type_name -> snomed.MapRequest.Parents
	18, // 30: snomed.MapResponse.translations:type_name -> snomed.ConceptReference
	42, // 31: snomed.ExtractResponse.entities:type_name -> snomed.ExtractResponse.Entity
	3,  // 32: snomed.SearchRequest.fuzzy:type_name -> snomed.SearchRequest.Fuzzy
	43, // 33: snomed.SearchResponse.items:type_name -> snomed.SearchResponse.Item
	32, // 34: snomed.SearchFeedback.request:type_name -> snomed.SearchRequest
	33, // 35: snomed.SearchFeedback.response:type_name -> snomed.SearchResponse
	3,  // 36: snomed.SynonymRequest.fuzzy:type_name -> snomed.SearchRequest.Fuzzy
	18, // 37: snomed.Expression.Clause.focus_concepts:type_name -> snomed.ConceptReference
	39, // 38: snomed.Expression.Clause.refinements:type_name -> snomed.Expression.Refinement
	38, // 39: snomed.Expression.Clause.refinement_groups:type_name -> snomed.Expression.RefinementGroup
	39, // 40: snomed.Expression.RefinementGroup.refinements:type_name -> snomed.Expression.Refinement
	18, // 41: snomed.Expression.Refinement.refinement_concept:type_name -> snomed.ConceptReference
	18, // 42: snomed.Expression.Refinement.concept_value:type_name -> snomed.ConceptReference
	37, // 43: snomed.Expression.Refinement.clause_value:type_name -> snomed.Expression.Clause
	18, // 44: snomed.RefinementResponse.Refinement.attribute:type_name -> snomed.ConceptReference
	18, // 45: snomed.RefinementResponse.Refinement.root_value:type_name -> snomed.ConceptReference
	18, // 46: snomed.RefinementResponse.Refinement.choices:type_name -> snomed.ConceptReference
	7,  // 47: snomed.TranslateFromResponse.Item.reference_set_item:type_name -> snomed.ReferenceSetItem
	4,  // 48: snomed.TranslateFromResponse.Item.concept:type_name -> snomed.Concept
	18, // 49: snomed.ExtractResponse.Entity.concepts:type_name -> snomed.ConceptReference
	50, // [50:50] is the sub-list for method output_type
	50, // [50:50] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_snomed_proto_init() }
func file_snomed_proto_init() {
	if File_snomed_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_snomed_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Concept); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Description); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Relationship); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceSetItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefSetDescriptorReferenceSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleReferenceSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanguageReferenceSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleMapReferenceSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplexMapReferenceSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeValueReferenceSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssociationReferenceSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedConcept); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptDescriptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubsumptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubsumptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefinementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefinementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranslateFromRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranslateFromResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossMapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchFeedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SynonymRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SynonymResponseItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_Clause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_RefinementGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_Refinement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefinementResponse_Refinement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranslateFromResponse_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractResponse_Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snomed_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_snomed_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ReferenceSetItem_RefsetDescriptor)(nil),
		(*ReferenceSetItem_Simple)(nil),
		(*ReferenceSetItem_Language)(nil),
		(*ReferenceSetItem_SimpleMap)(nil),
		(*ReferenceSetItem_ComplexMap)(nil),
		(*ReferenceSetItem_AttributeValue)(nil),
		(*ReferenceSetItem_Association)(nil),
	}
	file_snomed_proto_msgTypes[35].OneofWrappers = []interface{}{
		(*Expression_Refinement_ConceptValue)(nil),
		(*Expression_Refinement_ClauseValue)(nil),
		(*Expression_Refinement_StringValue)(nil),
		(*Expression_Refinement_IntValue)(nil),
		(*Expression_Refinement_DoubleValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_snomed_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_snomed_proto_goTypes,
		DependencyIndexes: file_snomed_proto_depIdxs,
		EnumInfos:         file_snomed_proto_enumTypes,
		MessageInfos:      file_snomed_proto_msgTypes,
	}.Build()
	File_snomed_proto = out.File
	file_snomed_proto_rawDesc = nil
	file_snomed_proto_goTypes = nil
	file_snomed_proto_depIdxs = nil
}
